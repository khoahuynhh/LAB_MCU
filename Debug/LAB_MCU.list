
LAB_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029e4  080029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a08  08002a08  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08002a08  08002a08  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a08  08002a08  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a08  08002a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08002a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  200001d8  08002be8  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08002be8  00020620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acdd  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002123  00000000  00000000  0002aede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002d008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  0002db90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753e  00000000  00000000  0002e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f002  00000000  00000000  00045b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082e2c  00000000  00000000  00054b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7944  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca8  00000000  00000000  000d7998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	080029cc 	.word	0x080029cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	080029cc 	.word	0x080029cc

0800014c <SCH_Init>:

unsigned char Error_code_G;
unsigned char head;
unsigned char tail;

void SCH_Init(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e006      	b.n	8000166 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4618      	mov	r0, r3
 800015c:	f000 f962 	bl	8000424 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	3301      	adds	r3, #1
 8000164:	71fb      	strb	r3, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	2b27      	cmp	r3, #39	; 0x27
 800016a:	d9f5      	bls.n	8000158 <SCH_Init+0xc>
	}
	// Reset the global error variable
	// − SCH_Delete_Task() will generate an error code,
	// (because the task array is empty)
	Error_code_G = 0;
 800016c:	4b06      	ldr	r3, [pc, #24]	; (8000188 <SCH_Init+0x3c>)
 800016e:	2200      	movs	r2, #0
 8000170:	701a      	strb	r2, [r3, #0]
	head = tail = 0;
 8000172:	4b06      	ldr	r3, [pc, #24]	; (800018c <SCH_Init+0x40>)
 8000174:	2200      	movs	r2, #0
 8000176:	701a      	strb	r2, [r3, #0]
 8000178:	4b04      	ldr	r3, [pc, #16]	; (800018c <SCH_Init+0x40>)
 800017a:	781a      	ldrb	r2, [r3, #0]
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <SCH_Init+0x44>)
 800017e:	701a      	strb	r2, [r3, #0]
	//Timer_init();
	//Watchdog_init();
}
 8000180:	bf00      	nop
 8000182:	3708      	adds	r7, #8
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}
 8000188:	20000228 	.word	0x20000228
 800018c:	20000574 	.word	0x20000574
 8000190:	20000575 	.word	0x20000575

08000194 <SCH_Update>:

void SCH_Update(void) {
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
	unsigned char Index;
	//NOTE: calculations are in *TICKS* (not milliseconds)
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800019a:	2300      	movs	r3, #0
 800019c:	71fb      	strb	r3, [r7, #7]
 800019e:	e074      	b.n	800028a <SCH_Update+0xf6>
		// Check if there is a task at this location
		if (SCH_tasks_G[Index].pTask) {
 80001a0:	79fa      	ldrb	r2, [r7, #7]
 80001a2:	493e      	ldr	r1, [pc, #248]	; (800029c <SCH_Update+0x108>)
 80001a4:	4613      	mov	r3, r2
 80001a6:	009b      	lsls	r3, r3, #2
 80001a8:	4413      	add	r3, r2
 80001aa:	009b      	lsls	r3, r3, #2
 80001ac:	440b      	add	r3, r1
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d067      	beq.n	8000284 <SCH_Update+0xf0>
			if (SCH_tasks_G[Index].Delay == 0) {
 80001b4:	79fa      	ldrb	r2, [r7, #7]
 80001b6:	4939      	ldr	r1, [pc, #228]	; (800029c <SCH_Update+0x108>)
 80001b8:	4613      	mov	r3, r2
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	4413      	add	r3, r2
 80001be:	009b      	lsls	r3, r3, #2
 80001c0:	440b      	add	r3, r1
 80001c2:	3304      	adds	r3, #4
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d149      	bne.n	800025e <SCH_Update+0xca>
				// The task is due to run
				// Inc. the ’RunMe’ flag
				SCH_tasks_G[Index].RunMe += 1;
 80001ca:	79fa      	ldrb	r2, [r7, #7]
 80001cc:	4933      	ldr	r1, [pc, #204]	; (800029c <SCH_Update+0x108>)
 80001ce:	4613      	mov	r3, r2
 80001d0:	009b      	lsls	r3, r3, #2
 80001d2:	4413      	add	r3, r2
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	440b      	add	r3, r1
 80001d8:	330c      	adds	r3, #12
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	79fa      	ldrb	r2, [r7, #7]
 80001de:	3301      	adds	r3, #1
 80001e0:	b2d8      	uxtb	r0, r3
 80001e2:	492e      	ldr	r1, [pc, #184]	; (800029c <SCH_Update+0x108>)
 80001e4:	4613      	mov	r3, r2
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	4413      	add	r3, r2
 80001ea:	009b      	lsls	r3, r3, #2
 80001ec:	440b      	add	r3, r1
 80001ee:	330c      	adds	r3, #12
 80001f0:	4602      	mov	r2, r0
 80001f2:	701a      	strb	r2, [r3, #0]
				queue[tail] = Index;
 80001f4:	4b2a      	ldr	r3, [pc, #168]	; (80002a0 <SCH_Update+0x10c>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a2a      	ldr	r2, [pc, #168]	; (80002a4 <SCH_Update+0x110>)
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	5453      	strb	r3, [r2, r1]
				tail = (tail + 1) % SCH_MAX_TASKS;
 8000200:	4b27      	ldr	r3, [pc, #156]	; (80002a0 <SCH_Update+0x10c>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	1c5a      	adds	r2, r3, #1
 8000206:	4b28      	ldr	r3, [pc, #160]	; (80002a8 <SCH_Update+0x114>)
 8000208:	fb83 1302 	smull	r1, r3, r3, r2
 800020c:	1119      	asrs	r1, r3, #4
 800020e:	17d3      	asrs	r3, r2, #31
 8000210:	1ac9      	subs	r1, r1, r3
 8000212:	460b      	mov	r3, r1
 8000214:	009b      	lsls	r3, r3, #2
 8000216:	440b      	add	r3, r1
 8000218:	00db      	lsls	r3, r3, #3
 800021a:	1ad1      	subs	r1, r2, r3
 800021c:	b2ca      	uxtb	r2, r1
 800021e:	4b20      	ldr	r3, [pc, #128]	; (80002a0 <SCH_Update+0x10c>)
 8000220:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period) {
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	491d      	ldr	r1, [pc, #116]	; (800029c <SCH_Update+0x108>)
 8000226:	4613      	mov	r3, r2
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	4413      	add	r3, r2
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	440b      	add	r3, r1
 8000230:	3308      	adds	r3, #8
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d025      	beq.n	8000284 <SCH_Update+0xf0>
					// Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8000238:	79f9      	ldrb	r1, [r7, #7]
 800023a:	79fa      	ldrb	r2, [r7, #7]
 800023c:	4817      	ldr	r0, [pc, #92]	; (800029c <SCH_Update+0x108>)
 800023e:	460b      	mov	r3, r1
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	440b      	add	r3, r1
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	4403      	add	r3, r0
 8000248:	3308      	adds	r3, #8
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	4813      	ldr	r0, [pc, #76]	; (800029c <SCH_Update+0x108>)
 800024e:	4613      	mov	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	4403      	add	r3, r0
 8000258:	3304      	adds	r3, #4
 800025a:	6019      	str	r1, [r3, #0]
 800025c:	e012      	b.n	8000284 <SCH_Update+0xf0>
				}
			} else {
				// Not yet ready to run: just decrement the delay
				SCH_tasks_G[Index].Delay -= 1;
 800025e:	79fa      	ldrb	r2, [r7, #7]
 8000260:	490e      	ldr	r1, [pc, #56]	; (800029c <SCH_Update+0x108>)
 8000262:	4613      	mov	r3, r2
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	4413      	add	r3, r2
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	440b      	add	r3, r1
 800026c:	3304      	adds	r3, #4
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	79fa      	ldrb	r2, [r7, #7]
 8000272:	1e59      	subs	r1, r3, #1
 8000274:	4809      	ldr	r0, [pc, #36]	; (800029c <SCH_Update+0x108>)
 8000276:	4613      	mov	r3, r2
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	4413      	add	r3, r2
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	4403      	add	r3, r0
 8000280:	3304      	adds	r3, #4
 8000282:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	3301      	adds	r3, #1
 8000288:	71fb      	strb	r3, [r7, #7]
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b27      	cmp	r3, #39	; 0x27
 800028e:	d987      	bls.n	80001a0 <SCH_Update+0xc>
			}
		}
	}
}
 8000290:	bf00      	nop
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	2000022c 	.word	0x2000022c
 80002a0:	20000574 	.word	0x20000574
 80002a4:	2000054c 	.word	0x2000054c
 80002a8:	66666667 	.word	0x66666667

080002ac <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), unsigned int DELAY,
		unsigned int PERIOD) {
 80002ac:	b480      	push	{r7}
 80002ae:	b087      	sub	sp, #28
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	75fb      	strb	r3, [r7, #23]
	// First find a gap in the array (if there is one)
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 80002bc:	e002      	b.n	80002c4 <SCH_Add_Task+0x18>
		Index++;
 80002be:	7dfb      	ldrb	r3, [r7, #23]
 80002c0:	3301      	adds	r3, #1
 80002c2:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)) {
 80002c4:	7dfa      	ldrb	r2, [r7, #23]
 80002c6:	4920      	ldr	r1, [pc, #128]	; (8000348 <SCH_Add_Task+0x9c>)
 80002c8:	4613      	mov	r3, r2
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	4413      	add	r3, r2
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	440b      	add	r3, r1
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d002      	beq.n	80002de <SCH_Add_Task+0x32>
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	2b27      	cmp	r3, #39	; 0x27
 80002dc:	d9ef      	bls.n	80002be <SCH_Add_Task+0x12>
	}
	// Have we reached the end of the list?
	if (Index == SCH_MAX_TASKS) {
 80002de:	7dfb      	ldrb	r3, [r7, #23]
 80002e0:	2b28      	cmp	r3, #40	; 0x28
 80002e2:	d104      	bne.n	80002ee <SCH_Add_Task+0x42>
		// Task list is full
		// Set the global error variable
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 80002e4:	4b19      	ldr	r3, [pc, #100]	; (800034c <SCH_Add_Task+0xa0>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]
		// Also return an error code
		return SCH_MAX_TASKS;
 80002ea:	2328      	movs	r3, #40	; 0x28
 80002ec:	e027      	b.n	800033e <SCH_Add_Task+0x92>
	}
	// If we’re here, there is a space in the task array
	SCH_tasks_G[Index].pTask = pFunction;
 80002ee:	7dfa      	ldrb	r2, [r7, #23]
 80002f0:	4915      	ldr	r1, [pc, #84]	; (8000348 <SCH_Add_Task+0x9c>)
 80002f2:	4613      	mov	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4413      	add	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	440b      	add	r3, r1
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 8000300:	7dfa      	ldrb	r2, [r7, #23]
 8000302:	4911      	ldr	r1, [pc, #68]	; (8000348 <SCH_Add_Task+0x9c>)
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	440b      	add	r3, r1
 800030e:	3304      	adds	r3, #4
 8000310:	68ba      	ldr	r2, [r7, #8]
 8000312:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 8000314:	7dfa      	ldrb	r2, [r7, #23]
 8000316:	490c      	ldr	r1, [pc, #48]	; (8000348 <SCH_Add_Task+0x9c>)
 8000318:	4613      	mov	r3, r2
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	4413      	add	r3, r2
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	440b      	add	r3, r1
 8000322:	3308      	adds	r3, #8
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 8000328:	7dfa      	ldrb	r2, [r7, #23]
 800032a:	4907      	ldr	r1, [pc, #28]	; (8000348 <SCH_Add_Task+0x9c>)
 800032c:	4613      	mov	r3, r2
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	4413      	add	r3, r2
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	440b      	add	r3, r1
 8000336:	330c      	adds	r3, #12
 8000338:	2200      	movs	r2, #0
 800033a:	701a      	strb	r2, [r3, #0]
	// return position of task (to allow later deletion)
	return Index;
 800033c:	7dfb      	ldrb	r3, [r7, #23]
}
 800033e:	4618      	mov	r0, r3
 8000340:	371c      	adds	r7, #28
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	2000022c 	.word	0x2000022c
 800034c:	20000228 	.word	0x20000228

08000350 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
	unsigned char Index;
	// Dispatches (runs) the next task (if one is ready)
	while (head != tail) {
 8000356:	e04e      	b.n	80003f6 <SCH_Dispatch_Tasks+0xa6>
		if (SCH_tasks_G[Index].RunMe > 0) {
 8000358:	79fa      	ldrb	r2, [r7, #7]
 800035a:	492d      	ldr	r1, [pc, #180]	; (8000410 <SCH_Dispatch_Tasks+0xc0>)
 800035c:	4613      	mov	r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	4413      	add	r3, r2
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	440b      	add	r3, r1
 8000366:	330c      	adds	r3, #12
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d043      	beq.n	80003f6 <SCH_Dispatch_Tasks+0xa6>
			Index = queue[head];
 800036e:	4b29      	ldr	r3, [pc, #164]	; (8000414 <SCH_Dispatch_Tasks+0xc4>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	461a      	mov	r2, r3
 8000374:	4b28      	ldr	r3, [pc, #160]	; (8000418 <SCH_Dispatch_Tasks+0xc8>)
 8000376:	5c9b      	ldrb	r3, [r3, r2]
 8000378:	71fb      	strb	r3, [r7, #7]
			head = (head + 1) % SCH_MAX_TASKS;
 800037a:	4b26      	ldr	r3, [pc, #152]	; (8000414 <SCH_Dispatch_Tasks+0xc4>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	1c5a      	adds	r2, r3, #1
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <SCH_Dispatch_Tasks+0xcc>)
 8000382:	fb83 1302 	smull	r1, r3, r3, r2
 8000386:	1119      	asrs	r1, r3, #4
 8000388:	17d3      	asrs	r3, r2, #31
 800038a:	1ac9      	subs	r1, r1, r3
 800038c:	460b      	mov	r3, r1
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	440b      	add	r3, r1
 8000392:	00db      	lsls	r3, r3, #3
 8000394:	1ad1      	subs	r1, r2, r3
 8000396:	b2ca      	uxtb	r2, r1
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <SCH_Dispatch_Tasks+0xc4>)
 800039a:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[Index].pTask)(); // Run the task
 800039c:	79fa      	ldrb	r2, [r7, #7]
 800039e:	491c      	ldr	r1, [pc, #112]	; (8000410 <SCH_Dispatch_Tasks+0xc0>)
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	440b      	add	r3, r1
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 80003ae:	79fa      	ldrb	r2, [r7, #7]
 80003b0:	4917      	ldr	r1, [pc, #92]	; (8000410 <SCH_Dispatch_Tasks+0xc0>)
 80003b2:	4613      	mov	r3, r2
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	4413      	add	r3, r2
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	440b      	add	r3, r1
 80003bc:	330c      	adds	r3, #12
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	79fa      	ldrb	r2, [r7, #7]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	b2d8      	uxtb	r0, r3
 80003c6:	4912      	ldr	r1, [pc, #72]	; (8000410 <SCH_Dispatch_Tasks+0xc0>)
 80003c8:	4613      	mov	r3, r2
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	4413      	add	r3, r2
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	440b      	add	r3, r1
 80003d2:	330c      	adds	r3, #12
 80003d4:	4602      	mov	r2, r0
 80003d6:	701a      	strb	r2, [r3, #0]
			// Periodic tasks will automatically run again
			// − if this is a ’one shot’ task, remove it from the array
			if (SCH_tasks_G[Index].Period == 0) {
 80003d8:	79fa      	ldrb	r2, [r7, #7]
 80003da:	490d      	ldr	r1, [pc, #52]	; (8000410 <SCH_Dispatch_Tasks+0xc0>)
 80003dc:	4613      	mov	r3, r2
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	4413      	add	r3, r2
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	440b      	add	r3, r1
 80003e6:	3308      	adds	r3, #8
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d103      	bne.n	80003f6 <SCH_Dispatch_Tasks+0xa6>
				SCH_Delete_Task(Index);
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f817 	bl	8000424 <SCH_Delete_Task>
	while (head != tail) {
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <SCH_Dispatch_Tasks+0xc4>)
 80003f8:	781a      	ldrb	r2, [r3, #0]
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <SCH_Dispatch_Tasks+0xd0>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d1aa      	bne.n	8000358 <SCH_Dispatch_Tasks+0x8>
		}
	}
	// Report system status
	//SCH_Report_Status();
	// The scheduler enters idle mode at this point
	SCH_Go_To_Sleep();
 8000402:	f000 f857 	bl	80004b4 <SCH_Go_To_Sleep>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000022c 	.word	0x2000022c
 8000414:	20000575 	.word	0x20000575
 8000418:	2000054c 	.word	0x2000054c
 800041c:	66666667 	.word	0x66666667
 8000420:	20000574 	.word	0x20000574

08000424 <SCH_Delete_Task>:

unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX) {
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]
	unsigned char Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 800042e:	79fa      	ldrb	r2, [r7, #7]
 8000430:	491e      	ldr	r1, [pc, #120]	; (80004ac <SCH_Delete_Task+0x88>)
 8000432:	4613      	mov	r3, r2
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	4413      	add	r3, r2
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	440b      	add	r3, r1
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d105      	bne.n	800044e <SCH_Delete_Task+0x2a>
		// No task at this location ...
		//
		// Set the global error variable
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000442:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <SCH_Delete_Task+0x8c>)
 8000444:	2202      	movs	r2, #2
 8000446:	701a      	strb	r2, [r3, #0]
		// ... also return an error code
		Return_code = RETURN_ERROR;
 8000448:	2303      	movs	r3, #3
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	e001      	b.n	8000452 <SCH_Delete_Task+0x2e>
	} else {
		Return_code = RETURN_NORMAL;
 800044e:	2304      	movs	r3, #4
 8000450:	73fb      	strb	r3, [r7, #15]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8000452:	79fa      	ldrb	r2, [r7, #7]
 8000454:	4915      	ldr	r1, [pc, #84]	; (80004ac <SCH_Delete_Task+0x88>)
 8000456:	4613      	mov	r3, r2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4413      	add	r3, r2
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	440b      	add	r3, r1
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 8000464:	79fa      	ldrb	r2, [r7, #7]
 8000466:	4911      	ldr	r1, [pc, #68]	; (80004ac <SCH_Delete_Task+0x88>)
 8000468:	4613      	mov	r3, r2
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	4413      	add	r3, r2
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	440b      	add	r3, r1
 8000472:	3304      	adds	r3, #4
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 8000478:	79fa      	ldrb	r2, [r7, #7]
 800047a:	490c      	ldr	r1, [pc, #48]	; (80004ac <SCH_Delete_Task+0x88>)
 800047c:	4613      	mov	r3, r2
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	4413      	add	r3, r2
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	440b      	add	r3, r1
 8000486:	3308      	adds	r3, #8
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 800048c:	79fa      	ldrb	r2, [r7, #7]
 800048e:	4907      	ldr	r1, [pc, #28]	; (80004ac <SCH_Delete_Task+0x88>)
 8000490:	4613      	mov	r3, r2
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	4413      	add	r3, r2
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	440b      	add	r3, r1
 800049a:	330c      	adds	r3, #12
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
	return Return_code; // return status
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	2000022c 	.word	0x2000022c
 80004b0:	20000228 	.word	0x20000228

080004b4 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep() {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80004b8:	2101      	movs	r1, #1
 80004ba:	2000      	movs	r0, #0
 80004bc:	f001 fa86 	bl	80019cc <HAL_PWR_EnterSLEEPMode>
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <isButton1Pressed>:
int TimeOutForKeyPress = 500;
int button1_pressed[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int button1_long_pressed[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int button1_flag[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

int isButton1Pressed(int index) {
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	if (button1_flag[index] == 1) {
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <isButton1Pressed+0x30>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d106      	bne.n	80004e6 <isButton1Pressed+0x22>
		button1_flag[index] = 0;
 80004d8:	4a06      	ldr	r2, [pc, #24]	; (80004f4 <isButton1Pressed+0x30>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2100      	movs	r1, #0
 80004de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80004e2:	2301      	movs	r3, #1
 80004e4:	e000      	b.n	80004e8 <isButton1Pressed+0x24>
	}
	return 0;
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200001f4 	.word	0x200001f4

080004f8 <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button1_flag[index] = 1;
}

void getKeyInput() {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	e012      	b.n	800052a <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 8000504:	4a46      	ldr	r2, [pc, #280]	; (8000620 <getKeyInput+0x128>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800050c:	4945      	ldr	r1, [pc, #276]	; (8000624 <getKeyInput+0x12c>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000514:	4a44      	ldr	r2, [pc, #272]	; (8000628 <getKeyInput+0x130>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800051c:	4940      	ldr	r1, [pc, #256]	; (8000620 <getKeyInput+0x128>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3301      	adds	r3, #1
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b09      	cmp	r3, #9
 800052e:	dde9      	ble.n	8000504 <getKeyInput+0xc>
	}
	// Add your key
	KeyReg0[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000534:	483d      	ldr	r0, [pc, #244]	; (800062c <getKeyInput+0x134>)
 8000536:	f001 fa01 	bl	800193c <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <getKeyInput+0x130>)
 8000540:	601a      	str	r2, [r3, #0]
	KeyReg0[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000546:	4839      	ldr	r0, [pc, #228]	; (800062c <getKeyInput+0x134>)
 8000548:	f001 f9f8 	bl	800193c <HAL_GPIO_ReadPin>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <getKeyInput+0x130>)
 8000552:	605a      	str	r2, [r3, #4]
	KeyReg0[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000558:	4834      	ldr	r0, [pc, #208]	; (800062c <getKeyInput+0x134>)
 800055a:	f001 f9ef 	bl	800193c <HAL_GPIO_ReadPin>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <getKeyInput+0x130>)
 8000564:	609a      	str	r2, [r3, #8]
	 KeyReg0[6] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
	 KeyReg0[7] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
	 KeyReg0[8] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
	 KeyReg0[9] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);*/

	for (int i = 0; i < 10; i++) {
 8000566:	2300      	movs	r3, #0
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	e050      	b.n	800060e <getKeyInput+0x116>
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800056c:	4a2c      	ldr	r2, [pc, #176]	; (8000620 <getKeyInput+0x128>)
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000574:	492c      	ldr	r1, [pc, #176]	; (8000628 <getKeyInput+0x130>)
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800057c:	429a      	cmp	r2, r3
 800057e:	d143      	bne.n	8000608 <getKeyInput+0x110>
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <getKeyInput+0x128>)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000588:	4926      	ldr	r1, [pc, #152]	; (8000624 <getKeyInput+0x12c>)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000590:	429a      	cmp	r2, r3
 8000592:	d139      	bne.n	8000608 <getKeyInput+0x110>
			if (KeyReg2[i] != KeyReg3[i]) {
 8000594:	4a23      	ldr	r2, [pc, #140]	; (8000624 <getKeyInput+0x12c>)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800059c:	4924      	ldr	r1, [pc, #144]	; (8000630 <getKeyInput+0x138>)
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d017      	beq.n	80005d8 <getKeyInput+0xe0>
				KeyReg3[i] = KeyReg2[i];
 80005a8:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <getKeyInput+0x12c>)
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005b0:	491f      	ldr	r1, [pc, #124]	; (8000630 <getKeyInput+0x138>)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE) {
 80005b8:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <getKeyInput+0x138>)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d121      	bne.n	8000608 <getKeyInput+0x110>
					TimeOutForKeyPress = 500;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <getKeyInput+0x13c>)
 80005c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005ca:	601a      	str	r2, [r3, #0]
					//subKeyProcess();
					button1_flag[i] = 1;
 80005cc:	4a1a      	ldr	r2, [pc, #104]	; (8000638 <getKeyInput+0x140>)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2101      	movs	r1, #1
 80005d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80005d6:	e017      	b.n	8000608 <getKeyInput+0x110>
				}

			} else {
				TimeOutForKeyPress--;
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <getKeyInput+0x13c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a15      	ldr	r2, [pc, #84]	; (8000634 <getKeyInput+0x13c>)
 80005e0:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress == 0) {
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <getKeyInput+0x13c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d10e      	bne.n	8000608 <getKeyInput+0x110>
					TimeOutForKeyPress = 500;
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <getKeyInput+0x13c>)
 80005ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005f0:	601a      	str	r2, [r3, #0]
					if (KeyReg3[i] == PRESSED_STATE) {
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <getKeyInput+0x138>)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d104      	bne.n	8000608 <getKeyInput+0x110>
						//subKeyProcess();
						button1_flag[i] = 1;
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <getKeyInput+0x140>)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2101      	movs	r1, #1
 8000604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	3301      	adds	r3, #1
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	2b09      	cmp	r3, #9
 8000612:	ddab      	ble.n	800056c <getKeyInput+0x74>
					}
				}
			}
		}
	}
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000028 	.word	0x20000028
 8000624:	20000050 	.word	0x20000050
 8000628:	20000000 	.word	0x20000000
 800062c:	40011000 	.word	0x40011000
 8000630:	20000078 	.word	0x20000078
 8000634:	200000a0 	.word	0x200000a0
 8000638:	200001f4 	.word	0x200001f4

0800063c <fsm_auto_run>:

#include "fsm_auto.h"
#include "led7_segment.h"
#include "light_traffic.h"

void fsm_auto_run() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	switch (status) {
 8000640:	4b84      	ldr	r3, [pc, #528]	; (8000854 <fsm_auto_run+0x218>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3b01      	subs	r3, #1
 8000646:	2b04      	cmp	r3, #4
 8000648:	f200 80f8 	bhi.w	800083c <fsm_auto_run+0x200>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <fsm_auto_run+0x18>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	08000669 	.word	0x08000669
 8000658:	0800068b 	.word	0x0800068b
 800065c:	0800071b 	.word	0x0800071b
 8000660:	08000779 	.word	0x08000779
 8000664:	080007db 	.word	0x080007db
	case INIT:
		init();
 8000668:	f000 fbb8 	bl	8000ddc <init>
		init_time();
 800066c:	f000 fb98 	bl	8000da0 <init_time>
		status = AUTO_RED;
 8000670:	4b78      	ldr	r3, [pc, #480]	; (8000854 <fsm_auto_run+0x218>)
 8000672:	2202      	movs	r2, #2
 8000674:	601a      	str	r2, [r3, #0]
		setTimer(0, 1000);
 8000676:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fd76 	bl	800116c <setTimer>
		setTimer(1, 250);
 8000680:	21fa      	movs	r1, #250	; 0xfa
 8000682:	2001      	movs	r0, #1
 8000684:	f000 fd72 	bl	800116c <setTimer>
		break;
 8000688:	e0e1      	b.n	800084e <fsm_auto_run+0x212>
	case AUTO_RED:
		led_red_and_green();
 800068a:	f000 fbc9 	bl	8000e20 <led_red_and_green>
		if (timer_flag[0] == 1) {
 800068e:	4b72      	ldr	r3, [pc, #456]	; (8000858 <fsm_auto_run+0x21c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d115      	bne.n	80006c2 <fsm_auto_run+0x86>
			time_green--;
 8000696:	4b71      	ldr	r3, [pc, #452]	; (800085c <fsm_auto_run+0x220>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3b01      	subs	r3, #1
 800069c:	4a6f      	ldr	r2, [pc, #444]	; (800085c <fsm_auto_run+0x220>)
 800069e:	6013      	str	r3, [r2, #0]
			time_red--;
 80006a0:	4b6f      	ldr	r3, [pc, #444]	; (8000860 <fsm_auto_run+0x224>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	4a6e      	ldr	r2, [pc, #440]	; (8000860 <fsm_auto_run+0x224>)
 80006a8:	6013      	str	r3, [r2, #0]
			if (time_green == 0) {
 80006aa:	4b6c      	ldr	r3, [pc, #432]	; (800085c <fsm_auto_run+0x220>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d102      	bne.n	80006b8 <fsm_auto_run+0x7c>
				status = AUTO_YELLOW;
 80006b2:	4b68      	ldr	r3, [pc, #416]	; (8000854 <fsm_auto_run+0x218>)
 80006b4:	2205      	movs	r2, #5
 80006b6:	601a      	str	r2, [r3, #0]
			}
			setTimer(0, 1000);
 80006b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 fd55 	bl	800116c <setTimer>
		}
		if (timer_flag[1] == 1) {
 80006c2:	4b65      	ldr	r3, [pc, #404]	; (8000858 <fsm_auto_run+0x21c>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d10d      	bne.n	80006e6 <fsm_auto_run+0xaa>
			displaySettingX(time_green);
 80006ca:	4b64      	ldr	r3, [pc, #400]	; (800085c <fsm_auto_run+0x220>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fb00 	bl	8000cd4 <displaySettingX>
			displaySetting(time_red);
 80006d4:	4b62      	ldr	r3, [pc, #392]	; (8000860 <fsm_auto_run+0x224>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fabb 	bl	8000c54 <displaySetting>
			setTimer(1, 250);
 80006de:	21fa      	movs	r1, #250	; 0xfa
 80006e0:	2001      	movs	r0, #1
 80006e2:	f000 fd43 	bl	800116c <setTimer>
		}
		if (isButton1Pressed(0) == 1) {
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff feec 	bl	80004c4 <isButton1Pressed>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	f040 80a6 	bne.w	8000840 <fsm_auto_run+0x204>
			init();
 80006f4:	f000 fb72 	bl	8000ddc <init>
			status = MAN_RED;
 80006f8:	4b56      	ldr	r3, [pc, #344]	; (8000854 <fsm_auto_run+0x218>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	601a      	str	r2, [r3, #0]
			setTimer(0, 100000);
 80006fe:	4959      	ldr	r1, [pc, #356]	; (8000864 <fsm_auto_run+0x228>)
 8000700:	2000      	movs	r0, #0
 8000702:	f000 fd33 	bl	800116c <setTimer>
			setTimer(2, 500);
 8000706:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800070a:	2002      	movs	r0, #2
 800070c:	f000 fd2e 	bl	800116c <setTimer>
			setTimer(3, 250);
 8000710:	21fa      	movs	r1, #250	; 0xfa
 8000712:	2003      	movs	r0, #3
 8000714:	f000 fd2a 	bl	800116c <setTimer>
		}
		break;
 8000718:	e092      	b.n	8000840 <fsm_auto_run+0x204>
	case AUTO_GREEN:
		led_green_and_red();
 800071a:	f000 fb95 	bl	8000e48 <led_green_and_red>
		if (timer_flag[0] == 1) {
 800071e:	4b4e      	ldr	r3, [pc, #312]	; (8000858 <fsm_auto_run+0x21c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d115      	bne.n	8000752 <fsm_auto_run+0x116>
			time_green--;
 8000726:	4b4d      	ldr	r3, [pc, #308]	; (800085c <fsm_auto_run+0x220>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3b01      	subs	r3, #1
 800072c:	4a4b      	ldr	r2, [pc, #300]	; (800085c <fsm_auto_run+0x220>)
 800072e:	6013      	str	r3, [r2, #0]
			time_red--;
 8000730:	4b4b      	ldr	r3, [pc, #300]	; (8000860 <fsm_auto_run+0x224>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3b01      	subs	r3, #1
 8000736:	4a4a      	ldr	r2, [pc, #296]	; (8000860 <fsm_auto_run+0x224>)
 8000738:	6013      	str	r3, [r2, #0]
			if (time_green == 0) {
 800073a:	4b48      	ldr	r3, [pc, #288]	; (800085c <fsm_auto_run+0x220>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d102      	bne.n	8000748 <fsm_auto_run+0x10c>
				status = AUTO_YELLOW_MAIN;
 8000742:	4b44      	ldr	r3, [pc, #272]	; (8000854 <fsm_auto_run+0x218>)
 8000744:	2204      	movs	r2, #4
 8000746:	601a      	str	r2, [r3, #0]
			}
			setTimer(0, 1000);
 8000748:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fd0d 	bl	800116c <setTimer>
		}
		if (timer_flag[1] == 1) {
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <fsm_auto_run+0x21c>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d174      	bne.n	8000844 <fsm_auto_run+0x208>
			displaySettingX(time_red);
 800075a:	4b41      	ldr	r3, [pc, #260]	; (8000860 <fsm_auto_run+0x224>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fab8 	bl	8000cd4 <displaySettingX>
			displaySetting(time_green);
 8000764:	4b3d      	ldr	r3, [pc, #244]	; (800085c <fsm_auto_run+0x220>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fa73 	bl	8000c54 <displaySetting>
			setTimer(1, 250);
 800076e:	21fa      	movs	r1, #250	; 0xfa
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fcfb 	bl	800116c <setTimer>
		}
		break;
 8000776:	e065      	b.n	8000844 <fsm_auto_run+0x208>
	case AUTO_YELLOW_MAIN:
		led_yellow_and_red();
 8000778:	f000 fb70 	bl	8000e5c <led_yellow_and_red>
		if (timer_flag[0] == 1) {
 800077c:	4b36      	ldr	r3, [pc, #216]	; (8000858 <fsm_auto_run+0x21c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d117      	bne.n	80007b4 <fsm_auto_run+0x178>
			time_red--;
 8000784:	4b36      	ldr	r3, [pc, #216]	; (8000860 <fsm_auto_run+0x224>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	4a35      	ldr	r2, [pc, #212]	; (8000860 <fsm_auto_run+0x224>)
 800078c:	6013      	str	r3, [r2, #0]
			time_yellow--;
 800078e:	4b36      	ldr	r3, [pc, #216]	; (8000868 <fsm_auto_run+0x22c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3b01      	subs	r3, #1
 8000794:	4a34      	ldr	r2, [pc, #208]	; (8000868 <fsm_auto_run+0x22c>)
 8000796:	6013      	str	r3, [r2, #0]
			if (time_red == 0) {
 8000798:	4b31      	ldr	r3, [pc, #196]	; (8000860 <fsm_auto_run+0x224>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d104      	bne.n	80007aa <fsm_auto_run+0x16e>
				init_time();
 80007a0:	f000 fafe 	bl	8000da0 <init_time>
				status = AUTO_RED;
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <fsm_auto_run+0x218>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	601a      	str	r2, [r3, #0]
			}
			setTimer(0, 1000);
 80007aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fcdc 	bl	800116c <setTimer>
		}
		if (timer_flag[1] == 1) {
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <fsm_auto_run+0x21c>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d145      	bne.n	8000848 <fsm_auto_run+0x20c>
			displaySettingX(time_red);
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <fsm_auto_run+0x224>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fa87 	bl	8000cd4 <displaySettingX>
			displaySetting(time_yellow);
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <fsm_auto_run+0x22c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fa42 	bl	8000c54 <displaySetting>
			setTimer(1, 250);
 80007d0:	21fa      	movs	r1, #250	; 0xfa
 80007d2:	2001      	movs	r0, #1
 80007d4:	f000 fcca 	bl	800116c <setTimer>
		}
		break;
 80007d8:	e036      	b.n	8000848 <fsm_auto_run+0x20c>
	case AUTO_YELLOW:
		led_red_and_yellow();
 80007da:	f000 fb2b 	bl	8000e34 <led_red_and_yellow>
		if (timer_flag[0] == 1) {
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <fsm_auto_run+0x21c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d117      	bne.n	8000816 <fsm_auto_run+0x1da>
			time_red--;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <fsm_auto_run+0x224>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <fsm_auto_run+0x224>)
 80007ee:	6013      	str	r3, [r2, #0]
			time_yellow--;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <fsm_auto_run+0x22c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <fsm_auto_run+0x22c>)
 80007f8:	6013      	str	r3, [r2, #0]
			if (time_red == 0) {
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <fsm_auto_run+0x224>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d104      	bne.n	800080c <fsm_auto_run+0x1d0>
				init_time();
 8000802:	f000 facd 	bl	8000da0 <init_time>
				status = AUTO_GREEN;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <fsm_auto_run+0x218>)
 8000808:	2203      	movs	r2, #3
 800080a:	601a      	str	r2, [r3, #0]
			}
			setTimer(0, 1000);
 800080c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000810:	2000      	movs	r0, #0
 8000812:	f000 fcab 	bl	800116c <setTimer>
		}
		if (timer_flag[1] == 1) {
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <fsm_auto_run+0x21c>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d116      	bne.n	800084c <fsm_auto_run+0x210>
			displaySettingX(time_yellow);
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <fsm_auto_run+0x22c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fa56 	bl	8000cd4 <displaySettingX>
			displaySetting(time_red);
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <fsm_auto_run+0x224>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fa11 	bl	8000c54 <displaySetting>
			setTimer(1, 250);
 8000832:	21fa      	movs	r1, #250	; 0xfa
 8000834:	2001      	movs	r0, #1
 8000836:	f000 fc99 	bl	800116c <setTimer>
		}
		break;
 800083a:	e007      	b.n	800084c <fsm_auto_run+0x210>
	default:
		break;
 800083c:	bf00      	nop
 800083e:	e006      	b.n	800084e <fsm_auto_run+0x212>
		break;
 8000840:	bf00      	nop
 8000842:	e004      	b.n	800084e <fsm_auto_run+0x212>
		break;
 8000844:	bf00      	nop
 8000846:	e002      	b.n	800084e <fsm_auto_run+0x212>
		break;
 8000848:	bf00      	nop
 800084a:	e000      	b.n	800084e <fsm_auto_run+0x212>
		break;
 800084c:	bf00      	nop
	}
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000021c 	.word	0x2000021c
 8000858:	200005f4 	.word	0x200005f4
 800085c:	20000578 	.word	0x20000578
 8000860:	2000057c 	.word	0x2000057c
 8000864:	000186a0 	.word	0x000186a0
 8000868:	20000580 	.word	0x20000580

0800086c <fsm_settings_run>:
 *      Author: Admin
 */

#include "fsm_settings.h"

void fsm_settings_run() {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	switch (status) {
 8000870:	4b82      	ldr	r3, [pc, #520]	; (8000a7c <fsm_settings_run+0x210>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b0e      	cmp	r3, #14
 8000876:	f000 8099 	beq.w	80009ac <fsm_settings_run+0x140>
 800087a:	2b0e      	cmp	r3, #14
 800087c:	f300 80f4 	bgt.w	8000a68 <fsm_settings_run+0x1fc>
 8000880:	2b0c      	cmp	r3, #12
 8000882:	d002      	beq.n	800088a <fsm_settings_run+0x1e>
 8000884:	2b0d      	cmp	r3, #13
 8000886:	d051      	beq.n	800092c <fsm_settings_run+0xc0>
			status = AUTO_RED;
			setTimer(0, 1000);
		}
		break;
	default:
		break;
 8000888:	e0ee      	b.n	8000a68 <fsm_settings_run+0x1fc>
		set_7SEG_X(LEDS_7SEG_state[2]);
 800088a:	487d      	ldr	r0, [pc, #500]	; (8000a80 <fsm_settings_run+0x214>)
 800088c:	f000 f90e 	bl	8000aac <set_7SEG_X>
		if (timer_flag[0] == 1) {
 8000890:	4b7c      	ldr	r3, [pc, #496]	; (8000a84 <fsm_settings_run+0x218>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d10b      	bne.n	80008b0 <fsm_settings_run+0x44>
			init();
 8000898:	f000 faa0 	bl	8000ddc <init>
			init_time();
 800089c:	f000 fa80 	bl	8000da0 <init_time>
			status = AUTO_RED;
 80008a0:	4b76      	ldr	r3, [pc, #472]	; (8000a7c <fsm_settings_run+0x210>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 80008a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fc5e 	bl	800116c <setTimer>
		if (timer_flag[2] == 1) {
 80008b0:	4b74      	ldr	r3, [pc, #464]	; (8000a84 <fsm_settings_run+0x218>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d106      	bne.n	80008c6 <fsm_settings_run+0x5a>
			blinking_led_red();
 80008b8:	f000 fada 	bl	8000e70 <blinking_led_red>
			setTimer(2, 500);
 80008bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008c0:	2002      	movs	r0, #2
 80008c2:	f000 fc53 	bl	800116c <setTimer>
		if (timer_flag[3] == 1) {
 80008c6:	4b6f      	ldr	r3, [pc, #444]	; (8000a84 <fsm_settings_run+0x218>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d108      	bne.n	80008e0 <fsm_settings_run+0x74>
			displaySetting(count);
 80008ce:	4b6e      	ldr	r3, [pc, #440]	; (8000a88 <fsm_settings_run+0x21c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f9be 	bl	8000c54 <displaySetting>
			setTimer(3, 250);
 80008d8:	21fa      	movs	r1, #250	; 0xfa
 80008da:	2003      	movs	r0, #3
 80008dc:	f000 fc46 	bl	800116c <setTimer>
		if (isButton1Pressed(0) == 1) {
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fdef 	bl	80004c4 <isButton1Pressed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d10b      	bne.n	8000904 <fsm_settings_run+0x98>
			time_red_update = count;
 80008ec:	4b66      	ldr	r3, [pc, #408]	; (8000a88 <fsm_settings_run+0x21c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a66      	ldr	r2, [pc, #408]	; (8000a8c <fsm_settings_run+0x220>)
 80008f2:	6013      	str	r3, [r2, #0]
			count = 1;
 80008f4:	4b64      	ldr	r3, [pc, #400]	; (8000a88 <fsm_settings_run+0x21c>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
			init();
 80008fa:	f000 fa6f 	bl	8000ddc <init>
			status = MAN_GREEN;
 80008fe:	4b5f      	ldr	r3, [pc, #380]	; (8000a7c <fsm_settings_run+0x210>)
 8000900:	220d      	movs	r2, #13
 8000902:	601a      	str	r2, [r3, #0]
		if (isButton1Pressed(1) == 1) {
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff fddd 	bl	80004c4 <isButton1Pressed>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	f040 80ad 	bne.w	8000a6c <fsm_settings_run+0x200>
			if (count > 99) {
 8000912:	4b5d      	ldr	r3, [pc, #372]	; (8000a88 <fsm_settings_run+0x21c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b63      	cmp	r3, #99	; 0x63
 8000918:	dd02      	ble.n	8000920 <fsm_settings_run+0xb4>
				count = 1;
 800091a:	4b5b      	ldr	r3, [pc, #364]	; (8000a88 <fsm_settings_run+0x21c>)
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
			count++;
 8000920:	4b59      	ldr	r3, [pc, #356]	; (8000a88 <fsm_settings_run+0x21c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	4a58      	ldr	r2, [pc, #352]	; (8000a88 <fsm_settings_run+0x21c>)
 8000928:	6013      	str	r3, [r2, #0]
		break;
 800092a:	e09f      	b.n	8000a6c <fsm_settings_run+0x200>
		set_7SEG_X(LEDS_7SEG_state[3]);
 800092c:	4858      	ldr	r0, [pc, #352]	; (8000a90 <fsm_settings_run+0x224>)
 800092e:	f000 f8bd 	bl	8000aac <set_7SEG_X>
		if (timer_flag[2] == 1) {
 8000932:	4b54      	ldr	r3, [pc, #336]	; (8000a84 <fsm_settings_run+0x218>)
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d106      	bne.n	8000948 <fsm_settings_run+0xdc>
			blinking_led_green();
 800093a:	f000 fab1 	bl	8000ea0 <blinking_led_green>
			setTimer(2, 500);
 800093e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000942:	2002      	movs	r0, #2
 8000944:	f000 fc12 	bl	800116c <setTimer>
		if (timer_flag[3] == 1) {
 8000948:	4b4e      	ldr	r3, [pc, #312]	; (8000a84 <fsm_settings_run+0x218>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d108      	bne.n	8000962 <fsm_settings_run+0xf6>
			displaySetting(count);
 8000950:	4b4d      	ldr	r3, [pc, #308]	; (8000a88 <fsm_settings_run+0x21c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f97d 	bl	8000c54 <displaySetting>
			setTimer(3, 250);
 800095a:	21fa      	movs	r1, #250	; 0xfa
 800095c:	2003      	movs	r0, #3
 800095e:	f000 fc05 	bl	800116c <setTimer>
		if (isButton1Pressed(0) == 1) {
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fdae 	bl	80004c4 <isButton1Pressed>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d10b      	bne.n	8000986 <fsm_settings_run+0x11a>
			time_green_update = count;
 800096e:	4b46      	ldr	r3, [pc, #280]	; (8000a88 <fsm_settings_run+0x21c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a48      	ldr	r2, [pc, #288]	; (8000a94 <fsm_settings_run+0x228>)
 8000974:	6013      	str	r3, [r2, #0]
			count = 1;
 8000976:	4b44      	ldr	r3, [pc, #272]	; (8000a88 <fsm_settings_run+0x21c>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]
			init();
 800097c:	f000 fa2e 	bl	8000ddc <init>
			status = MAN_YELLOW;
 8000980:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <fsm_settings_run+0x210>)
 8000982:	220e      	movs	r2, #14
 8000984:	601a      	str	r2, [r3, #0]
		if (isButton1Pressed(1) == 1) {
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff fd9c 	bl	80004c4 <isButton1Pressed>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d16e      	bne.n	8000a70 <fsm_settings_run+0x204>
			if (count > 99) {
 8000992:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <fsm_settings_run+0x21c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b63      	cmp	r3, #99	; 0x63
 8000998:	dd02      	ble.n	80009a0 <fsm_settings_run+0x134>
				count = 1;
 800099a:	4b3b      	ldr	r3, [pc, #236]	; (8000a88 <fsm_settings_run+0x21c>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]
			count++;
 80009a0:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <fsm_settings_run+0x21c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a38      	ldr	r2, [pc, #224]	; (8000a88 <fsm_settings_run+0x21c>)
 80009a8:	6013      	str	r3, [r2, #0]
		break;
 80009aa:	e061      	b.n	8000a70 <fsm_settings_run+0x204>
		set_7SEG_X(LEDS_7SEG_state[4]);
 80009ac:	483a      	ldr	r0, [pc, #232]	; (8000a98 <fsm_settings_run+0x22c>)
 80009ae:	f000 f87d 	bl	8000aac <set_7SEG_X>
		if (timer_flag[2] == 1) {
 80009b2:	4b34      	ldr	r3, [pc, #208]	; (8000a84 <fsm_settings_run+0x218>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d106      	bne.n	80009c8 <fsm_settings_run+0x15c>
			blinking_led_yellow();
 80009ba:	f000 fa89 	bl	8000ed0 <blinking_led_yellow>
			setTimer(2, 500);
 80009be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009c2:	2002      	movs	r0, #2
 80009c4:	f000 fbd2 	bl	800116c <setTimer>
		if (timer_flag[3] == 1) {
 80009c8:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <fsm_settings_run+0x218>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d108      	bne.n	80009e2 <fsm_settings_run+0x176>
			displaySetting(count);
 80009d0:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <fsm_settings_run+0x21c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f93d 	bl	8000c54 <displaySetting>
			setTimer(3, 250);
 80009da:	21fa      	movs	r1, #250	; 0xfa
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 fbc5 	bl	800116c <setTimer>
		if (isButton1Pressed(0) == 1) {
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fd6e 	bl	80004c4 <isButton1Pressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d115      	bne.n	8000a1a <fsm_settings_run+0x1ae>
			count = 1;
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <fsm_settings_run+0x21c>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
			init();
 80009f4:	f000 f9f2 	bl	8000ddc <init>
			time_red = 5;
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <fsm_settings_run+0x230>)
 80009fa:	2205      	movs	r2, #5
 80009fc:	601a      	str	r2, [r3, #0]
			time_green = 3;
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <fsm_settings_run+0x234>)
 8000a00:	2203      	movs	r2, #3
 8000a02:	601a      	str	r2, [r3, #0]
			time_yellow = 2;
 8000a04:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <fsm_settings_run+0x238>)
 8000a06:	2202      	movs	r2, #2
 8000a08:	601a      	str	r2, [r3, #0]
			status = AUTO_RED;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <fsm_settings_run+0x210>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000a10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 fba9 	bl	800116c <setTimer>
		if (isButton1Pressed(1) == 1) {
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff fd52 	bl	80004c4 <isButton1Pressed>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d10b      	bne.n	8000a3e <fsm_settings_run+0x1d2>
			if (count > 99) {
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <fsm_settings_run+0x21c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b63      	cmp	r3, #99	; 0x63
 8000a2c:	dd02      	ble.n	8000a34 <fsm_settings_run+0x1c8>
				count = 1;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <fsm_settings_run+0x21c>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
			count++;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <fsm_settings_run+0x21c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <fsm_settings_run+0x21c>)
 8000a3c:	6013      	str	r3, [r2, #0]
		if (isButton1Pressed(2) == 1) {
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f7ff fd40 	bl	80004c4 <isButton1Pressed>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d114      	bne.n	8000a74 <fsm_settings_run+0x208>
			time_yellow_update = count;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <fsm_settings_run+0x21c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <fsm_settings_run+0x23c>)
 8000a50:	6013      	str	r3, [r2, #0]
			init_time();
 8000a52:	f000 f9a5 	bl	8000da0 <init_time>
			status = AUTO_RED;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <fsm_settings_run+0x210>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000a5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fb83 	bl	800116c <setTimer>
		break;
 8000a66:	e005      	b.n	8000a74 <fsm_settings_run+0x208>
		break;
 8000a68:	bf00      	nop
 8000a6a:	e004      	b.n	8000a76 <fsm_settings_run+0x20a>
		break;
 8000a6c:	bf00      	nop
 8000a6e:	e002      	b.n	8000a76 <fsm_settings_run+0x20a>
		break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <fsm_settings_run+0x20a>
		break;
 8000a74:	bf00      	nop
	}
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000021c 	.word	0x2000021c
 8000a80:	20000116 	.word	0x20000116
 8000a84:	200005f4 	.word	0x200005f4
 8000a88:	200000a4 	.word	0x200000a4
 8000a8c:	200000a8 	.word	0x200000a8
 8000a90:	2000011d 	.word	0x2000011d
 8000a94:	200000ac 	.word	0x200000ac
 8000a98:	20000124 	.word	0x20000124
 8000a9c:	2000057c 	.word	0x2000057c
 8000aa0:	20000578 	.word	0x20000578
 8000aa4:	20000580 	.word	0x20000580
 8000aa8:	200000b0 	.word	0x200000b0

08000aac <set_7SEG_X>:
GPIO_PinState LEDS_7SEG_state[10][7] = { { 0, 0, 0, 0, 0, 0, 1 }, { 1, 0, 0, 1,
		1, 1, 1 }, { 0, 0, 1, 0, 0, 1, 0 }, { 0, 0, 0, 0, 1, 1, 0 }, { 1, 0, 0,
		1, 1, 0, 0 }, { 0, 1, 0, 0, 1, 0, 0 }, { 0, 1, 0, 0, 0, 0, 0 }, { 0, 0,
		0, 1, 1, 1, 1 }, { 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 1, 0, 0 } };

void set_7SEG_X(const GPIO_PinState *L_LEDS_X_state) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aba:	4813      	ldr	r0, [pc, #76]	; (8000b08 <set_7SEG_X+0x5c>)
 8000abc:	f000 ff55 	bl	800196a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	4810      	ldr	r0, [pc, #64]	; (8000b08 <set_7SEG_X+0x5c>)
 8000ac8:	f000 ff4f 	bl	800196a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	e011      	b.n	8000af6 <set_7SEG_X+0x4a>
		HAL_GPIO_WritePin(SEG_PORTS[i], SEG_PINS[i], L_LEDS_X_state[i]);
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <set_7SEG_X+0x60>)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ada:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <set_7SEG_X+0x64>)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	f000 ff3d 	bl	800196a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3301      	adds	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b06      	cmp	r3, #6
 8000afa:	ddea      	ble.n	8000ad2 <set_7SEG_X+0x26>
	}
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40010c00 	.word	0x40010c00
 8000b0c:	200000b4 	.word	0x200000b4
 8000b10:	200000ec 	.word	0x200000ec

08000b14 <set_7SEG_X_left>:

void set_7SEG_X_left(const GPIO_PinState *L_LEDS_X_state) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b22:	4813      	ldr	r0, [pc, #76]	; (8000b70 <set_7SEG_X_left+0x5c>)
 8000b24:	f000 ff21 	bl	800196a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2e:	4810      	ldr	r0, [pc, #64]	; (8000b70 <set_7SEG_X_left+0x5c>)
 8000b30:	f000 ff1b 	bl	800196a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e011      	b.n	8000b5e <set_7SEG_X_left+0x4a>
		HAL_GPIO_WritePin(SEG_PORTS[i], SEG_PINS[i], L_LEDS_X_state[i]);
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <set_7SEG_X_left+0x60>)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b42:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <set_7SEG_X_left+0x64>)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	f000 ff09 	bl	800196a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2b06      	cmp	r3, #6
 8000b62:	ddea      	ble.n	8000b3a <set_7SEG_X_left+0x26>
	}
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40010c00 	.word	0x40010c00
 8000b74:	200000b4 	.word	0x200000b4
 8000b78:	200000ec 	.word	0x200000ec

08000b7c <set_7SEG_Y>:

void set_7SEG_Y(const GPIO_PinState *L_LEDS_Y_state) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b8a:	4814      	ldr	r0, [pc, #80]	; (8000bdc <set_7SEG_Y+0x60>)
 8000b8c:	f000 feed 	bl	800196a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b96:	4811      	ldr	r0, [pc, #68]	; (8000bdc <set_7SEG_Y+0x60>)
 8000b98:	f000 fee7 	bl	800196a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	e013      	b.n	8000bca <set_7SEG_Y+0x4e>
		HAL_GPIO_WritePin(SEG_PORTS[i + 7], SEG_PINS[i + 7], L_LEDS_Y_state[i]);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3307      	adds	r3, #7
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <set_7SEG_Y+0x64>)
 8000ba8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3307      	adds	r3, #7
 8000bb0:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <set_7SEG_Y+0x68>)
 8000bb2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	f000 fed3 	bl	800196a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	dde8      	ble.n	8000ba2 <set_7SEG_Y+0x26>
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	200000b4 	.word	0x200000b4
 8000be4:	200000ec 	.word	0x200000ec

08000be8 <set_7SEG_Y_left>:

void set_7SEG_Y_left(const GPIO_PinState *L_LEDS_Y_state) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf6:	4814      	ldr	r0, [pc, #80]	; (8000c48 <set_7SEG_Y_left+0x60>)
 8000bf8:	f000 feb7 	bl	800196a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c02:	4811      	ldr	r0, [pc, #68]	; (8000c48 <set_7SEG_Y_left+0x60>)
 8000c04:	f000 feb1 	bl	800196a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	e013      	b.n	8000c36 <set_7SEG_Y_left+0x4e>
		HAL_GPIO_WritePin(SEG_PORTS[i + 7], SEG_PINS[i + 7], L_LEDS_Y_state[i]);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3307      	adds	r3, #7
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <set_7SEG_Y_left+0x64>)
 8000c14:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3307      	adds	r3, #7
 8000c1c:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <set_7SEG_Y_left+0x68>)
 8000c1e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f000 fe9d 	bl	800196a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b06      	cmp	r3, #6
 8000c3a:	dde8      	ble.n	8000c0e <set_7SEG_Y_left+0x26>
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	200000b4 	.word	0x200000b4
 8000c50:	200000ec 	.word	0x200000ec

08000c54 <displaySetting>:

void displaySetting(int time) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	switch (counter1) {
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <displaySetting+0x74>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <displaySetting+0x16>
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d013      	beq.n	8000c90 <displaySetting+0x3c>
	case 1:
		set_7SEG_Y(LEDS_7SEG_state[time % 10]);
		counter1 = 0;
		break;
	default:
		break;
 8000c68:	e02a      	b.n	8000cc0 <displaySetting+0x6c>
		set_7SEG_Y_left(LEDS_7SEG_state[time / 10]);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <displaySetting+0x78>)
 8000c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c72:	1092      	asrs	r2, r2, #2
 8000c74:	17db      	asrs	r3, r3, #31
 8000c76:	1ad2      	subs	r2, r2, r3
 8000c78:	4613      	mov	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <displaySetting+0x7c>)
 8000c80:	4413      	add	r3, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ffb0 	bl	8000be8 <set_7SEG_Y_left>
		counter1 = 1;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <displaySetting+0x74>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
		break;
 8000c8e:	e017      	b.n	8000cc0 <displaySetting+0x6c>
		set_7SEG_Y(LEDS_7SEG_state[time % 10]);
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <displaySetting+0x78>)
 8000c94:	fb83 2301 	smull	r2, r3, r3, r1
 8000c98:	109a      	asrs	r2, r3, #2
 8000c9a:	17cb      	asrs	r3, r1, #31
 8000c9c:	1ad2      	subs	r2, r2, r3
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	1aca      	subs	r2, r1, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <displaySetting+0x7c>)
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff62 	bl	8000b7c <set_7SEG_Y>
		counter1 = 0;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <displaySetting+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
		break;
 8000cbe:	bf00      	nop
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000220 	.word	0x20000220
 8000ccc:	66666667 	.word	0x66666667
 8000cd0:	20000108 	.word	0x20000108

08000cd4 <displaySettingX>:

void displaySettingX(int time) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	switch (counter2) {
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <displaySettingX+0x74>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <displaySettingX+0x16>
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d013      	beq.n	8000d10 <displaySettingX+0x3c>
	case 1:
		set_7SEG_X(LEDS_7SEG_state[time % 10]);
		counter2 = 0;
		break;
	default:
		break;
 8000ce8:	e02a      	b.n	8000d40 <displaySettingX+0x6c>
		set_7SEG_X_left(LEDS_7SEG_state[time / 10]);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <displaySettingX+0x78>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	1092      	asrs	r2, r2, #2
 8000cf4:	17db      	asrs	r3, r3, #31
 8000cf6:	1ad2      	subs	r2, r2, r3
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	1a9b      	subs	r3, r3, r2
 8000cfe:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <displaySettingX+0x7c>)
 8000d00:	4413      	add	r3, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff06 	bl	8000b14 <set_7SEG_X_left>
		counter2 = 1;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <displaySettingX+0x74>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]
		break;
 8000d0e:	e017      	b.n	8000d40 <displaySettingX+0x6c>
		set_7SEG_X(LEDS_7SEG_state[time % 10]);
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <displaySettingX+0x78>)
 8000d14:	fb83 2301 	smull	r2, r3, r3, r1
 8000d18:	109a      	asrs	r2, r3, #2
 8000d1a:	17cb      	asrs	r3, r1, #31
 8000d1c:	1ad2      	subs	r2, r2, r3
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	1aca      	subs	r2, r1, r3
 8000d28:	4613      	mov	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <displaySettingX+0x7c>)
 8000d30:	4413      	add	r3, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff feba 	bl	8000aac <set_7SEG_X>
		counter2 = 0;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <displaySettingX+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
		break;
 8000d3e:	bf00      	nop
	}
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000224 	.word	0x20000224
 8000d4c:	66666667 	.word	0x66666667
 8000d50:	20000108 	.word	0x20000108

08000d54 <set_LEDS>:
GPIO_PinState LEDS_state[4][12] = { { 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0 }, { 0,
		1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1 },
		{ 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0 }, { 0, 0, 1, 0, 1, 0, 0, 0, 1, 0,
				1, 0 } };

void set_LEDS(const GPIO_PinState *state) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 12; i++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	e011      	b.n	8000d86 <set_LEDS+0x32>
		HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], state[i]);
 8000d62:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <set_LEDS+0x44>)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d6a:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <set_LEDS+0x48>)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	4413      	add	r3, r2
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f000 fdf5 	bl	800196a <HAL_GPIO_WritePin>
	for (int i = 0; i < 12; i++) {
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3301      	adds	r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2b0b      	cmp	r3, #11
 8000d8a:	ddea      	ble.n	8000d62 <set_LEDS+0xe>
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000150 	.word	0x20000150
 8000d9c:	20000180 	.word	0x20000180

08000da0 <init_time>:

void init_time() {
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
	time_red = time_red_update;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <init_time+0x24>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <init_time+0x28>)
 8000daa:	6013      	str	r3, [r2, #0]
	time_green = time_green_update;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <init_time+0x2c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <init_time+0x30>)
 8000db2:	6013      	str	r3, [r2, #0]
	time_yellow = time_yellow_update;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <init_time+0x34>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <init_time+0x38>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	200000a8 	.word	0x200000a8
 8000dc8:	2000057c 	.word	0x2000057c
 8000dcc:	200000ac 	.word	0x200000ac
 8000dd0:	20000578 	.word	0x20000578
 8000dd4:	200000b0 	.word	0x200000b0
 8000dd8:	20000580 	.word	0x20000580

08000ddc <init>:

void init() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 12; i++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	e00e      	b.n	8000e06 <init+0x2a>
		HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], RESET);
 8000de8:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <init+0x3c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <init+0x40>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f000 fdb5 	bl	800196a <HAL_GPIO_WritePin>
	for (int i = 0; i < 12; i++) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3301      	adds	r3, #1
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0b      	cmp	r3, #11
 8000e0a:	dded      	ble.n	8000de8 <init+0xc>
	}
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000150 	.word	0x20000150
 8000e1c:	20000180 	.word	0x20000180

08000e20 <led_red_and_green>:

void led_red_and_green() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	set_LEDS(LEDS_state[2]);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <led_red_and_green+0x10>)
 8000e26:	f7ff ff95 	bl	8000d54 <set_LEDS>
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200001b0 	.word	0x200001b0

08000e34 <led_red_and_yellow>:

void led_red_and_yellow() {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	set_LEDS(LEDS_state[3]);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <led_red_and_yellow+0x10>)
 8000e3a:	f7ff ff8b 	bl	8000d54 <set_LEDS>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001bc 	.word	0x200001bc

08000e48 <led_green_and_red>:

void led_green_and_red() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	set_LEDS(LEDS_state[0]);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <led_green_and_red+0x10>)
 8000e4e:	f7ff ff81 	bl	8000d54 <set_LEDS>
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000198 	.word	0x20000198

08000e5c <led_yellow_and_red>:

void led_yellow_and_red() {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	set_LEDS(LEDS_state[1]);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <led_yellow_and_red+0x10>)
 8000e62:	f7ff ff77 	bl	8000d54 <set_LEDS>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001a4 	.word	0x200001a4

08000e70 <blinking_led_red>:

void blinking_led_red() {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000e74:	2102      	movs	r1, #2
 8000e76:	4809      	ldr	r0, [pc, #36]	; (8000e9c <blinking_led_red+0x2c>)
 8000e78:	f000 fd8f 	bl	800199a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	4807      	ldr	r0, [pc, #28]	; (8000e9c <blinking_led_red+0x2c>)
 8000e80:	f000 fd8b 	bl	800199a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_8_GPIO_Port, LED_8_Pin);
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <blinking_led_red+0x2c>)
 8000e88:	f000 fd87 	bl	800199a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_11_GPIO_Port, LED_11_Pin);
 8000e8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <blinking_led_red+0x2c>)
 8000e92:	f000 fd82 	bl	800199a <HAL_GPIO_TogglePin>
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40010c00 	.word	0x40010c00

08000ea0 <blinking_led_green>:

void blinking_led_green() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4809      	ldr	r0, [pc, #36]	; (8000ecc <blinking_led_green+0x2c>)
 8000ea8:	f000 fd77 	bl	800199a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8000eac:	2108      	movs	r1, #8
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <blinking_led_green+0x2c>)
 8000eb0:	f000 fd73 	bl	800199a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_7_GPIO_Port, LED_7_Pin);
 8000eb4:	2140      	movs	r1, #64	; 0x40
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <blinking_led_green+0x2c>)
 8000eb8:	f000 fd6f 	bl	800199a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_10_GPIO_Port, LED_10_Pin);
 8000ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <blinking_led_green+0x2c>)
 8000ec2:	f000 fd6a 	bl	800199a <HAL_GPIO_TogglePin>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40010c00 	.word	0x40010c00

08000ed0 <blinking_led_yellow>:

void blinking_led_yellow() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	4809      	ldr	r0, [pc, #36]	; (8000efc <blinking_led_yellow+0x2c>)
 8000ed8:	f000 fd5f 	bl	800199a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_6_GPIO_Port, LED_6_Pin);
 8000edc:	2120      	movs	r1, #32
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <blinking_led_yellow+0x2c>)
 8000ee0:	f000 fd5b 	bl	800199a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_9_GPIO_Port, LED_9_Pin);
 8000ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <blinking_led_yellow+0x2c>)
 8000eea:	f000 fd56 	bl	800199a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_12_GPIO_Port, LED_12_Pin);
 8000eee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef2:	4802      	ldr	r0, [pc, #8]	; (8000efc <blinking_led_yellow+0x2c>)
 8000ef4:	f000 fd51 	bl	800199a <HAL_GPIO_TogglePin>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fa30 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f822 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 f8a8 	bl	8001060 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f10:	f000 f85a 	bl	8000fc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <main+0x40>)
 8000f16:	f001 f9a1 	bl	800225c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	SCH_Init();
 8000f1a:	f7ff f917 	bl	800014c <SCH_Init>
	status = INIT;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <main+0x44>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]
	SCH_Add_Task(fsm_auto_run, 0, 10);
 8000f24:	220a      	movs	r2, #10
 8000f26:	2100      	movs	r1, #0
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <main+0x48>)
 8000f2a:	f7ff f9bf 	bl	80002ac <SCH_Add_Task>
	SCH_Add_Task(fsm_settings_run, 5, 5);
 8000f2e:	2205      	movs	r2, #5
 8000f30:	2105      	movs	r1, #5
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <main+0x4c>)
 8000f34:	f7ff f9ba 	bl	80002ac <SCH_Add_Task>
	while (1) {
		SCH_Dispatch_Tasks();
 8000f38:	f7ff fa0a 	bl	8000350 <SCH_Dispatch_Tasks>
 8000f3c:	e7fc      	b.n	8000f38 <main+0x38>
 8000f3e:	bf00      	nop
 8000f40:	20000584 	.word	0x20000584
 8000f44:	2000021c 	.word	0x2000021c
 8000f48:	0800063d 	.word	0x0800063d
 8000f4c:	0800086d 	.word	0x0800086d

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b090      	sub	sp, #64	; 0x40
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	2228      	movs	r2, #40	; 0x28
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fd2c 	bl	80029bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fd3c 	bl	8001a04 <HAL_RCC_OscConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f92:	f000 f8e5 	bl	8001160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f96:	230f      	movs	r3, #15
 8000f98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 ffa8 	bl	8001f04 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fba:	f000 f8d1 	bl	8001160 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3740      	adds	r7, #64	; 0x40
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <MX_TIM2_Init+0x94>)
 8000fe6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_TIM2_Init+0x94>)
 8000fee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ff2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <MX_TIM2_Init+0x94>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_TIM2_Init+0x94>)
 8000ffc:	2209      	movs	r2, #9
 8000ffe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_TIM2_Init+0x94>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_TIM2_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800100c:	4813      	ldr	r0, [pc, #76]	; (800105c <MX_TIM2_Init+0x94>)
 800100e:	f001 f8d5 	bl	80021bc <HAL_TIM_Base_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001018:	f000 f8a2 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <MX_TIM2_Init+0x94>)
 800102a:	f001 fa53 	bl	80024d4 <HAL_TIM_ConfigClockSource>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001034:	f000 f894 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001040:	463b      	mov	r3, r7
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_TIM2_Init+0x94>)
 8001046:	f001 fc2b 	bl	80028a0 <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001050:	f000 f886 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000584 	.word	0x20000584

08001060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <MX_GPIO_Init+0xd4>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a2e      	ldr	r2, [pc, #184]	; (8001134 <MX_GPIO_Init+0xd4>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <MX_GPIO_Init+0xd4>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <MX_GPIO_Init+0xd4>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <MX_GPIO_Init+0xd4>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <MX_GPIO_Init+0xd4>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b23      	ldr	r3, [pc, #140]	; (8001134 <MX_GPIO_Init+0xd4>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a22      	ldr	r2, [pc, #136]	; (8001134 <MX_GPIO_Init+0xd4>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b20      	ldr	r3, [pc, #128]	; (8001134 <MX_GPIO_Init+0xd4>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 80010bc:	2200      	movs	r2, #0
 80010be:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80010c2:	481d      	ldr	r0, [pc, #116]	; (8001138 <MX_GPIO_Init+0xd8>)
 80010c4:	f000 fc51 	bl	800196a <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_7_Pin
                          |SEG_8_Pin|SEG_9_Pin|SEG_10_Pin|SEG_11_Pin
                          |SEG_12_Pin|SEG_13_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_11_Pin
 80010c8:	2200      	movs	r2, #0
 80010ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010ce:	481b      	ldr	r0, [pc, #108]	; (800113c <MX_GPIO_Init+0xdc>)
 80010d0:	f000 fc4b 	bl	800196a <HAL_GPIO_WritePin>
                          |LED_12_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |LED_7_Pin|LED_8_Pin|LED_9_Pin|LED_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80010d4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010de:	2301      	movs	r3, #1
 80010e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4619      	mov	r1, r3
 80010e8:	4815      	ldr	r0, [pc, #84]	; (8001140 <MX_GPIO_Init+0xe0>)
 80010ea:	f000 faad 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin SEG_7_Pin
                           SEG_8_Pin SEG_9_Pin SEG_10_Pin SEG_11_Pin
                           SEG_12_Pin SEG_13_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 80010ee:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80010f2:	613b      	str	r3, [r7, #16]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin|SEG_7_Pin
                          |SEG_8_Pin|SEG_9_Pin|SEG_10_Pin|SEG_11_Pin
                          |SEG_12_Pin|SEG_13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_GPIO_Init+0xd8>)
 8001108:	f000 fa9e 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_11_Pin
                           LED_12_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin LED_4_Pin LED_5_Pin LED_6_Pin
                           LED_7_Pin LED_8_Pin LED_9_Pin LED_10_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_11_Pin
 800110c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001110:	613b      	str	r3, [r7, #16]
                          |LED_12_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|LED_4_Pin|LED_5_Pin|LED_6_Pin
                          |LED_7_Pin|LED_8_Pin|LED_9_Pin|LED_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2302      	movs	r3, #2
 800111c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_GPIO_Init+0xdc>)
 8001126:	f000 fa8f 	bl	8001648 <HAL_GPIO_Init>

}
 800112a:	bf00      	nop
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	40010800 	.word	0x40010800
 800113c:	40010c00 	.word	0x40010c00
 8001140:	40011000 	.word	0x40011000

08001144 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800114c:	f7ff f822 	bl	8000194 <SCH_Update>
	timerRun();
 8001150:	f000 f82a 	bl	80011a8 <timerRun>
	getKeyInput();
 8001154:	f7ff f9d0 	bl	80004f8 <getKeyInput>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <setTimer>:
 */
#include "software_timer.h"
int timer_flag[10];
int timer_counter[10];
int timer_cycle = 10;
void setTimer(int index, int counter) {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <setTimer+0x30>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2100      	movs	r1, #0
 800117c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / timer_cycle;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <setTimer+0x34>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	fb92 f2f3 	sdiv	r2, r2, r3
 800118a:	4906      	ldr	r1, [pc, #24]	; (80011a4 <setTimer+0x38>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	200005f4 	.word	0x200005f4
 80011a0:	200001c8 	.word	0x200001c8
 80011a4:	200005cc 	.word	0x200005cc

080011a8 <timerRun>:
void timerRun() {
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	e017      	b.n	80011e4 <timerRun+0x3c>
		if (timer_counter[i] > 0) {
 80011b4:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <timerRun+0x50>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	dd09      	ble.n	80011d4 <timerRun+0x2c>
			timer_counter[i]--;
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <timerRun+0x50>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	490b      	ldr	r1, [pc, #44]	; (80011f8 <timerRun+0x50>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80011d2:	e004      	b.n	80011de <timerRun+0x36>
		} else {
			timer_flag[i] = 1;
 80011d4:	4a09      	ldr	r2, [pc, #36]	; (80011fc <timerRun+0x54>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2101      	movs	r1, #1
 80011da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3301      	adds	r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b09      	cmp	r3, #9
 80011e8:	dde4      	ble.n	80011b4 <timerRun+0xc>
		}
	}
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200005cc 	.word	0x200005cc
 80011fc:	200005f4 	.word	0x200005f4

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_MspInit+0x5c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a14      	ldr	r2, [pc, #80]	; (800125c <HAL_MspInit+0x5c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6193      	str	r3, [r2, #24]
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_MspInit+0x5c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_MspInit+0x5c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_MspInit+0x5c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_MspInit+0x5c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_MspInit+0x60>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_MspInit+0x60>)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000

08001264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001274:	d113      	bne.n	800129e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_TIM_Base_MspInit+0x44>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_TIM_Base_MspInit+0x44>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	61d3      	str	r3, [r2, #28]
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_TIM_Base_MspInit+0x44>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	201c      	movs	r0, #28
 8001294:	f000 f9a1 	bl	80015da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001298:	201c      	movs	r0, #28
 800129a:	f000 f9ba 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f2:	f000 f87f 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <TIM2_IRQHandler+0x10>)
 8001302:	f000 fff7 	bl	80022f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000584 	.word	0x20000584

08001310 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800131c:	f7ff fff8 	bl	8001310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001322:	490c      	ldr	r1, [pc, #48]	; (8001354 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001324:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001338:	4c09      	ldr	r4, [pc, #36]	; (8001360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001346:	f001 fb15 	bl	8002974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134a:	f7ff fdd9 	bl	8000f00 <main>
  bx lr
 800134e:	4770      	bx	lr
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001358:	08002a10 	.word	0x08002a10
  ldr r2, =_sbss
 800135c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001360:	20000620 	.word	0x20000620

08001364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC1_2_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_Init+0x28>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_Init+0x28>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f923 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	200f      	movs	r0, #15
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff ff3c 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f93b 	bl	800162e <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f903 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200001cc 	.word	0x200001cc
 80013ec:	200001d4 	.word	0x200001d4
 80013f0:	200001d0 	.word	0x200001d0

080013f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x1c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x20>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x20>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	200001d4 	.word	0x200001d4
 8001414:	2000061c 	.word	0x2000061c

08001418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <HAL_GetTick+0x10>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	2000061c 	.word	0x2000061c

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4906      	ldr	r1, [pc, #24]	; (80014c4 <__NVIC_EnableIRQ+0x34>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff90 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff2d 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff42 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff90 	bl	800151c <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5f 	bl	80014c8 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff35 	bl	8001490 <__NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffa2 	bl	8001580 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b08b      	sub	sp, #44	; 0x2c
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165a:	e148      	b.n	80018ee <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800165c:	2201      	movs	r2, #1
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	429a      	cmp	r2, r3
 8001676:	f040 8137 	bne.w	80018e8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4aa3      	ldr	r2, [pc, #652]	; (800190c <HAL_GPIO_Init+0x2c4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d05e      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 8001684:	4aa1      	ldr	r2, [pc, #644]	; (800190c <HAL_GPIO_Init+0x2c4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d875      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 800168a:	4aa1      	ldr	r2, [pc, #644]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d058      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 8001690:	4a9f      	ldr	r2, [pc, #636]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d86f      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 8001696:	4a9f      	ldr	r2, [pc, #636]	; (8001914 <HAL_GPIO_Init+0x2cc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d052      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 800169c:	4a9d      	ldr	r2, [pc, #628]	; (8001914 <HAL_GPIO_Init+0x2cc>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d869      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016a2:	4a9d      	ldr	r2, [pc, #628]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d04c      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 80016a8:	4a9b      	ldr	r2, [pc, #620]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d863      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016ae:	4a9b      	ldr	r2, [pc, #620]	; (800191c <HAL_GPIO_Init+0x2d4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d046      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 80016b4:	4a99      	ldr	r2, [pc, #612]	; (800191c <HAL_GPIO_Init+0x2d4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d85d      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016ba:	2b12      	cmp	r3, #18
 80016bc:	d82a      	bhi.n	8001714 <HAL_GPIO_Init+0xcc>
 80016be:	2b12      	cmp	r3, #18
 80016c0:	d859      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <HAL_GPIO_Init+0x80>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	08001743 	.word	0x08001743
 80016cc:	0800171d 	.word	0x0800171d
 80016d0:	0800172f 	.word	0x0800172f
 80016d4:	08001771 	.word	0x08001771
 80016d8:	08001777 	.word	0x08001777
 80016dc:	08001777 	.word	0x08001777
 80016e0:	08001777 	.word	0x08001777
 80016e4:	08001777 	.word	0x08001777
 80016e8:	08001777 	.word	0x08001777
 80016ec:	08001777 	.word	0x08001777
 80016f0:	08001777 	.word	0x08001777
 80016f4:	08001777 	.word	0x08001777
 80016f8:	08001777 	.word	0x08001777
 80016fc:	08001777 	.word	0x08001777
 8001700:	08001777 	.word	0x08001777
 8001704:	08001777 	.word	0x08001777
 8001708:	08001777 	.word	0x08001777
 800170c:	08001725 	.word	0x08001725
 8001710:	08001739 	.word	0x08001739
 8001714:	4a82      	ldr	r2, [pc, #520]	; (8001920 <HAL_GPIO_Init+0x2d8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800171a:	e02c      	b.n	8001776 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	623b      	str	r3, [r7, #32]
          break;
 8001722:	e029      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	3304      	adds	r3, #4
 800172a:	623b      	str	r3, [r7, #32]
          break;
 800172c:	e024      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	3308      	adds	r3, #8
 8001734:	623b      	str	r3, [r7, #32]
          break;
 8001736:	e01f      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	330c      	adds	r3, #12
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	e01a      	b.n	8001778 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800174a:	2304      	movs	r3, #4
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e013      	b.n	8001778 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001758:	2308      	movs	r3, #8
 800175a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	611a      	str	r2, [r3, #16]
          break;
 8001762:	e009      	b.n	8001778 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001764:	2308      	movs	r3, #8
 8001766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	615a      	str	r2, [r3, #20]
          break;
 800176e:	e003      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x130>
          break;
 8001776:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d801      	bhi.n	8001782 <HAL_GPIO_Init+0x13a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	e001      	b.n	8001786 <HAL_GPIO_Init+0x13e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3304      	adds	r3, #4
 8001786:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2bff      	cmp	r3, #255	; 0xff
 800178c:	d802      	bhi.n	8001794 <HAL_GPIO_Init+0x14c>
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x152>
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	3b08      	subs	r3, #8
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	210f      	movs	r1, #15
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	401a      	ands	r2, r3
 80017ac:	6a39      	ldr	r1, [r7, #32]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	431a      	orrs	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8090 	beq.w	80018e8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017c8:	4b56      	ldr	r3, [pc, #344]	; (8001924 <HAL_GPIO_Init+0x2dc>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a55      	ldr	r2, [pc, #340]	; (8001924 <HAL_GPIO_Init+0x2dc>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_GPIO_Init+0x2dc>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017e0:	4a51      	ldr	r2, [pc, #324]	; (8001928 <HAL_GPIO_Init+0x2e0>)
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a49      	ldr	r2, [pc, #292]	; (800192c <HAL_GPIO_Init+0x2e4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00d      	beq.n	8001828 <HAL_GPIO_Init+0x1e0>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_GPIO_Init+0x2e8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d007      	beq.n	8001824 <HAL_GPIO_Init+0x1dc>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a47      	ldr	r2, [pc, #284]	; (8001934 <HAL_GPIO_Init+0x2ec>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_GPIO_Init+0x1d8>
 800181c:	2302      	movs	r3, #2
 800181e:	e004      	b.n	800182a <HAL_GPIO_Init+0x1e2>
 8001820:	2303      	movs	r3, #3
 8001822:	e002      	b.n	800182a <HAL_GPIO_Init+0x1e2>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_GPIO_Init+0x1e2>
 8001828:	2300      	movs	r3, #0
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	f002 0203 	and.w	r2, r2, #3
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	4093      	lsls	r3, r2
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800183a:	493b      	ldr	r1, [pc, #236]	; (8001928 <HAL_GPIO_Init+0x2e0>)
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001854:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	4937      	ldr	r1, [pc, #220]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001862:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	4933      	ldr	r1, [pc, #204]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 800186c:	4013      	ands	r3, r2
 800186e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800187c:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	492d      	ldr	r1, [pc, #180]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	60cb      	str	r3, [r1, #12]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	4929      	ldr	r1, [pc, #164]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 8001894:	4013      	ands	r3, r2
 8001896:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4923      	ldr	r1, [pc, #140]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	491f      	ldr	r1, [pc, #124]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018bc:	4013      	ands	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4919      	ldr	r1, [pc, #100]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4915      	ldr	r1, [pc, #84]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	3301      	adds	r3, #1
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f47f aeaf 	bne.w	800165c <HAL_GPIO_Init+0x14>
  }
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	372c      	adds	r7, #44	; 0x2c
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	10320000 	.word	0x10320000
 8001910:	10310000 	.word	0x10310000
 8001914:	10220000 	.word	0x10220000
 8001918:	10210000 	.word	0x10210000
 800191c:	10120000 	.word	0x10120000
 8001920:	10110000 	.word	0x10110000
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000
 800192c:	40010800 	.word	0x40010800
 8001930:	40010c00 	.word	0x40010c00
 8001934:	40011000 	.word	0x40011000
 8001938:	40010400 	.word	0x40010400

0800193c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	887b      	ldrh	r3, [r7, #2]
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e001      	b.n	800195e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	807b      	strh	r3, [r7, #2]
 8001976:	4613      	mov	r3, r2
 8001978:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197a:	787b      	ldrb	r3, [r7, #1]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001980:	887a      	ldrh	r2, [r7, #2]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001986:	e003      	b.n	8001990 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	041a      	lsls	r2, r3, #16
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	611a      	str	r2, [r3, #16]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ac:	887a      	ldrh	r2, [r7, #2]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4013      	ands	r3, r2
 80019b2:	041a      	lsls	r2, r3, #16
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	400b      	ands	r3, r1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	611a      	str	r2, [r3, #16]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_PWR_EnterSLEEPMode+0x34>)
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <HAL_PWR_EnterSLEEPMode+0x34>)
 80019de:	f023 0304 	bic.w	r3, r3, #4
 80019e2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80019ea:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80019ec:	e002      	b.n	80019f4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80019ee:	bf40      	sev
    __WFE();
 80019f0:	bf20      	wfe
    __WFE();
 80019f2:	bf20      	wfe
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e26c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 8087 	beq.w	8001b32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a24:	4b92      	ldr	r3, [pc, #584]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d00c      	beq.n	8001a4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a30:	4b8f      	ldr	r3, [pc, #572]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d112      	bne.n	8001a62 <HAL_RCC_OscConfig+0x5e>
 8001a3c:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a48:	d10b      	bne.n	8001a62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d06c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x12c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d168      	bne.n	8001b30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e246      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x76>
 8001a6c:	4b80      	ldr	r3, [pc, #512]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a7f      	ldr	r2, [pc, #508]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e02e      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x98>
 8001a82:	4b7b      	ldr	r3, [pc, #492]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a7a      	ldr	r2, [pc, #488]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b78      	ldr	r3, [pc, #480]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a77      	ldr	r2, [pc, #476]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e01d      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xbc>
 8001aa6:	4b72      	ldr	r3, [pc, #456]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a71      	ldr	r2, [pc, #452]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a6e      	ldr	r2, [pc, #440]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xd4>
 8001ac0:	4b6b      	ldr	r3, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a6a      	ldr	r2, [pc, #424]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a67      	ldr	r2, [pc, #412]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fc9a 	bl	8001418 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fc96 	bl	8001418 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e1fa      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xe4>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff fc86 	bl	8001418 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff fc82 	bl	8001418 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1e6      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x10c>
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3e:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00b      	beq.n	8001b62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b4a:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d11c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x18c>
 8001b56:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d116      	bne.n	8001b90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_RCC_OscConfig+0x176>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e1ba      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4939      	ldr	r1, [pc, #228]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	e03a      	b.n	8001c06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fc3b 	bl	8001418 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fc37 	bl	8001418 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e19b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4927      	ldr	r1, [pc, #156]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e015      	b.n	8001c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fc1a 	bl	8001418 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be8:	f7ff fc16 	bl	8001418 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e17a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d03a      	beq.n	8001c88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d019      	beq.n	8001c4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c20:	f7ff fbfa 	bl	8001418 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff fbf6 	bl	8001418 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e15a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f000 fa9a 	bl	8002180 <RCC_Delay>
 8001c4c:	e01c      	b.n	8001c88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_OscConfig+0x274>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c54:	f7ff fbe0 	bl	8001418 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5a:	e00f      	b.n	8001c7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fbdc 	bl	8001418 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d908      	bls.n	8001c7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e140      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	42420000 	.word	0x42420000
 8001c78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	4b9e      	ldr	r3, [pc, #632]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e9      	bne.n	8001c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a6 	beq.w	8001de2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9a:	4b97      	ldr	r3, [pc, #604]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10d      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b94      	ldr	r3, [pc, #592]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a93      	ldr	r2, [pc, #588]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]
 8001cb2:	4b91      	ldr	r3, [pc, #580]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b8e      	ldr	r3, [pc, #568]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d118      	bne.n	8001d00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cce:	4b8b      	ldr	r3, [pc, #556]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a8a      	ldr	r2, [pc, #552]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cda:	f7ff fb9d 	bl	8001418 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce2:	f7ff fb99 	bl	8001418 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b64      	cmp	r3, #100	; 0x64
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0fd      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	4b81      	ldr	r3, [pc, #516]	; (8001efc <HAL_RCC_OscConfig+0x4f8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x312>
 8001d08:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a7a      	ldr	r2, [pc, #488]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	e02d      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x334>
 8001d1e:	4b76      	ldr	r3, [pc, #472]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a75      	ldr	r2, [pc, #468]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	f023 0301 	bic.w	r3, r3, #1
 8001d28:	6213      	str	r3, [r2, #32]
 8001d2a:	4b73      	ldr	r3, [pc, #460]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a72      	ldr	r2, [pc, #456]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	6213      	str	r3, [r2, #32]
 8001d36:	e01c      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d10c      	bne.n	8001d5a <HAL_RCC_OscConfig+0x356>
 8001d40:	4b6d      	ldr	r3, [pc, #436]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4a6c      	ldr	r2, [pc, #432]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	f043 0304 	orr.w	r3, r3, #4
 8001d4a:	6213      	str	r3, [r2, #32]
 8001d4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a69      	ldr	r2, [pc, #420]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6213      	str	r3, [r2, #32]
 8001d58:	e00b      	b.n	8001d72 <HAL_RCC_OscConfig+0x36e>
 8001d5a:	4b67      	ldr	r3, [pc, #412]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a66      	ldr	r2, [pc, #408]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6213      	str	r3, [r2, #32]
 8001d66:	4b64      	ldr	r3, [pc, #400]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a63      	ldr	r2, [pc, #396]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d015      	beq.n	8001da6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fb4d 	bl	8001418 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d82:	f7ff fb49 	bl	8001418 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0ab      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0ee      	beq.n	8001d82 <HAL_RCC_OscConfig+0x37e>
 8001da4:	e014      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da6:	f7ff fb37 	bl	8001418 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dac:	e00a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7ff fb33 	bl	8001418 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e095      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ee      	bne.n	8001dae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d105      	bne.n	8001de2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd6:	4b48      	ldr	r3, [pc, #288]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a47      	ldr	r2, [pc, #284]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8081 	beq.w	8001eee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dec:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d061      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d146      	bne.n	8001e8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e00:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <HAL_RCC_OscConfig+0x4fc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fb07 	bl	8001418 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff fb03 	bl	8001418 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e067      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e20:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e34:	d108      	bne.n	8001e48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	492d      	ldr	r1, [pc, #180]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a19      	ldr	r1, [r3, #32]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	4927      	ldr	r1, [pc, #156]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x4fc>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fad7 	bl	8001418 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff fad3 	bl	8001418 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e037      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x46a>
 8001e8c:	e02f      	b.n	8001eee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_RCC_OscConfig+0x4fc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fac0 	bl	8001418 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff fabc 	bl	8001418 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e020      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x498>
 8001eba:	e018      	b.n	8001eee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e013      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40007000 	.word	0x40007000
 8001f00:	42420060 	.word	0x42420060

08001f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0d0      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d910      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4965      	ldr	r1, [pc, #404]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0b8      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	494d      	ldr	r1, [pc, #308]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d040      	beq.n	8002024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d115      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e07f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc2:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e073      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e06b      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4936      	ldr	r1, [pc, #216]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff4:	f7ff fa10 	bl	8001418 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7ff fa0c 	bl	8001418 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e053      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d210      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	4922      	ldr	r1, [pc, #136]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e032      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4916      	ldr	r1, [pc, #88]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	490e      	ldr	r1, [pc, #56]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002092:	f000 f821 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	490a      	ldr	r1, [pc, #40]	; (80020cc <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1cc>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x1d0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f96e 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080029e4 	.word	0x080029e4
 80020d0:	200001cc 	.word	0x200001cc
 80020d4:	200001d0 	.word	0x200001d0

080020d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d002      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x30>
 8002102:	2b08      	cmp	r3, #8
 8002104:	d003      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x36>
 8002106:	e027      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800210a:	613b      	str	r3, [r7, #16]
      break;
 800210c:	e027      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0c9b      	lsrs	r3, r3, #18
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	0c5b      	lsrs	r3, r3, #17
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	4a11      	ldr	r2, [pc, #68]	; (8002178 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002132:	5cd3      	ldrb	r3, [r2, r3]
 8002134:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800213a:	fb02 f203 	mul.w	r2, r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e004      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_RCC_GetSysClockFreq+0xa4>)
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	613b      	str	r3, [r7, #16]
      break;
 8002156:	e002      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800215a:	613b      	str	r3, [r7, #16]
      break;
 800215c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215e:	693b      	ldr	r3, [r7, #16]
}
 8002160:	4618      	mov	r0, r3
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	007a1200 	.word	0x007a1200
 8002174:	080029f4 	.word	0x080029f4
 8002178:	08002a04 	.word	0x08002a04
 800217c:	003d0900 	.word	0x003d0900

08002180 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <RCC_Delay+0x34>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <RCC_Delay+0x38>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0a5b      	lsrs	r3, r3, #9
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800219c:	bf00      	nop
  }
  while (Delay --);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1e5a      	subs	r2, r3, #1
 80021a2:	60fa      	str	r2, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f9      	bne.n	800219c <RCC_Delay+0x1c>
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	200001cc 	.word	0x200001cc
 80021b8:	10624dd3 	.word	0x10624dd3

080021bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e041      	b.n	8002252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff f83e 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 fa56 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d001      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e035      	b.n	80022e0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a16      	ldr	r2, [pc, #88]	; (80022ec <HAL_TIM_Base_Start_IT+0x90>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d009      	beq.n	80022aa <HAL_TIM_Base_Start_IT+0x4e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229e:	d004      	beq.n	80022aa <HAL_TIM_Base_Start_IT+0x4e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_TIM_Base_Start_IT+0x94>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d111      	bne.n	80022ce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b06      	cmp	r3, #6
 80022ba:	d010      	beq.n	80022de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022cc:	e007      	b.n	80022de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40012c00 	.word	0x40012c00
 80022f0:	40000400 	.word	0x40000400

080022f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d020      	beq.n	8002358 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01b      	beq.n	8002358 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0202 	mvn.w	r2, #2
 8002328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f998 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 8002344:	e005      	b.n	8002352 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f98b 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f99a 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d020      	beq.n	80023a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01b      	beq.n	80023a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0204 	mvn.w	r2, #4
 8002374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2202      	movs	r2, #2
 800237a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f972 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f965 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f974 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d020      	beq.n	80023f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0208 	mvn.w	r2, #8
 80023c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2204      	movs	r2, #4
 80023c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f94c 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f93f 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f94e 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d020      	beq.n	800243c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0210 	mvn.w	r2, #16
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2208      	movs	r2, #8
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f926 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f919 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f928 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00c      	beq.n	8002460 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0201 	mvn.w	r2, #1
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe fe72 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fa6f 	bl	8002962 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f8f8 	bl	8002698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0220 	mvn.w	r2, #32
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fa42 	bl	8002950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_TIM_ConfigClockSource+0x1c>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e0b4      	b.n	800265a <HAL_TIM_ConfigClockSource+0x186>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800250e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002528:	d03e      	beq.n	80025a8 <HAL_TIM_ConfigClockSource+0xd4>
 800252a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252e:	f200 8087 	bhi.w	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002536:	f000 8086 	beq.w	8002646 <HAL_TIM_ConfigClockSource+0x172>
 800253a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253e:	d87f      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002540:	2b70      	cmp	r3, #112	; 0x70
 8002542:	d01a      	beq.n	800257a <HAL_TIM_ConfigClockSource+0xa6>
 8002544:	2b70      	cmp	r3, #112	; 0x70
 8002546:	d87b      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002548:	2b60      	cmp	r3, #96	; 0x60
 800254a:	d050      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0x11a>
 800254c:	2b60      	cmp	r3, #96	; 0x60
 800254e:	d877      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002550:	2b50      	cmp	r3, #80	; 0x50
 8002552:	d03c      	beq.n	80025ce <HAL_TIM_ConfigClockSource+0xfa>
 8002554:	2b50      	cmp	r3, #80	; 0x50
 8002556:	d873      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d058      	beq.n	800260e <HAL_TIM_ConfigClockSource+0x13a>
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d86f      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002560:	2b30      	cmp	r3, #48	; 0x30
 8002562:	d064      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x15a>
 8002564:	2b30      	cmp	r3, #48	; 0x30
 8002566:	d86b      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002568:	2b20      	cmp	r3, #32
 800256a:	d060      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x15a>
 800256c:	2b20      	cmp	r3, #32
 800256e:	d867      	bhi.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002570:	2b00      	cmp	r3, #0
 8002572:	d05c      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x15a>
 8002574:	2b10      	cmp	r3, #16
 8002576:	d05a      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x15a>
 8002578:	e062      	b.n	8002640 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6899      	ldr	r1, [r3, #8]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f000 f96a 	bl	8002862 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800259c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	609a      	str	r2, [r3, #8]
      break;
 80025a6:	e04f      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6899      	ldr	r1, [r3, #8]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f000 f953 	bl	8002862 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ca:	609a      	str	r2, [r3, #8]
      break;
 80025cc:	e03c      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6859      	ldr	r1, [r3, #4]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	461a      	mov	r2, r3
 80025dc:	f000 f8ca 	bl	8002774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2150      	movs	r1, #80	; 0x50
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f921 	bl	800282e <TIM_ITRx_SetConfig>
      break;
 80025ec:	e02c      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f000 f8e8 	bl	80027d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2160      	movs	r1, #96	; 0x60
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f911 	bl	800282e <TIM_ITRx_SetConfig>
      break;
 800260c:	e01c      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	461a      	mov	r2, r3
 800261c:	f000 f8aa 	bl	8002774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2140      	movs	r1, #64	; 0x40
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f901 	bl	800282e <TIM_ITRx_SetConfig>
      break;
 800262c:	e00c      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f000 f8f8 	bl	800282e <TIM_ITRx_SetConfig>
      break;
 800263e:	e003      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      break;
 8002644:	e000      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
	...

080026ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a2b      	ldr	r2, [pc, #172]	; (800276c <TIM_Base_SetConfig+0xc0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <TIM_Base_SetConfig+0x28>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0x28>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a28      	ldr	r2, [pc, #160]	; (8002770 <TIM_Base_SetConfig+0xc4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d108      	bne.n	80026e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a20      	ldr	r2, [pc, #128]	; (800276c <TIM_Base_SetConfig+0xc0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <TIM_Base_SetConfig+0x52>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f4:	d003      	beq.n	80026fe <TIM_Base_SetConfig+0x52>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <TIM_Base_SetConfig+0xc4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d108      	bne.n	8002710 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a0d      	ldr	r2, [pc, #52]	; (800276c <TIM_Base_SetConfig+0xc0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d103      	bne.n	8002744 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f023 0201 	bic.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	611a      	str	r2, [r3, #16]
  }
}
 8002762:	bf00      	nop
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40000400 	.word	0x40000400

08002774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	f023 0201 	bic.w	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800279e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f023 030a 	bic.w	r3, r3, #10
 80027b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	621a      	str	r2, [r3, #32]
}
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	f023 0210 	bic.w	r2, r3, #16
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	031b      	lsls	r3, r3, #12
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800280c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	621a      	str	r2, [r3, #32]
}
 8002824:	bf00      	nop
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800282e:	b480      	push	{r7}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	f043 0307 	orr.w	r3, r3, #7
 8002850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002862:	b480      	push	{r7}
 8002864:	b087      	sub	sp, #28
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800287c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	021a      	lsls	r2, r3, #8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	431a      	orrs	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4313      	orrs	r3, r2
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	609a      	str	r2, [r3, #8]
}
 8002896:	bf00      	nop
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e041      	b.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a14      	ldr	r2, [pc, #80]	; (8002948 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d004      	beq.n	8002910 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a10      	ldr	r2, [pc, #64]	; (800294c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d10c      	bne.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002916:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	4313      	orrs	r3, r2
 8002920:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40000400 	.word	0x40000400

08002950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <__libc_init_array>:
 8002974:	b570      	push	{r4, r5, r6, lr}
 8002976:	2600      	movs	r6, #0
 8002978:	4d0c      	ldr	r5, [pc, #48]	; (80029ac <__libc_init_array+0x38>)
 800297a:	4c0d      	ldr	r4, [pc, #52]	; (80029b0 <__libc_init_array+0x3c>)
 800297c:	1b64      	subs	r4, r4, r5
 800297e:	10a4      	asrs	r4, r4, #2
 8002980:	42a6      	cmp	r6, r4
 8002982:	d109      	bne.n	8002998 <__libc_init_array+0x24>
 8002984:	f000 f822 	bl	80029cc <_init>
 8002988:	2600      	movs	r6, #0
 800298a:	4d0a      	ldr	r5, [pc, #40]	; (80029b4 <__libc_init_array+0x40>)
 800298c:	4c0a      	ldr	r4, [pc, #40]	; (80029b8 <__libc_init_array+0x44>)
 800298e:	1b64      	subs	r4, r4, r5
 8002990:	10a4      	asrs	r4, r4, #2
 8002992:	42a6      	cmp	r6, r4
 8002994:	d105      	bne.n	80029a2 <__libc_init_array+0x2e>
 8002996:	bd70      	pop	{r4, r5, r6, pc}
 8002998:	f855 3b04 	ldr.w	r3, [r5], #4
 800299c:	4798      	blx	r3
 800299e:	3601      	adds	r6, #1
 80029a0:	e7ee      	b.n	8002980 <__libc_init_array+0xc>
 80029a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a6:	4798      	blx	r3
 80029a8:	3601      	adds	r6, #1
 80029aa:	e7f2      	b.n	8002992 <__libc_init_array+0x1e>
 80029ac:	08002a08 	.word	0x08002a08
 80029b0:	08002a08 	.word	0x08002a08
 80029b4:	08002a08 	.word	0x08002a08
 80029b8:	08002a0c 	.word	0x08002a0c

080029bc <memset>:
 80029bc:	4603      	mov	r3, r0
 80029be:	4402      	add	r2, r0
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d100      	bne.n	80029c6 <memset+0xa>
 80029c4:	4770      	bx	lr
 80029c6:	f803 1b01 	strb.w	r1, [r3], #1
 80029ca:	e7f9      	b.n	80029c0 <memset+0x4>

080029cc <_init>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	bf00      	nop
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr

080029d8 <_fini>:
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	bf00      	nop
 80029dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029de:	bc08      	pop	{r3}
 80029e0:	469e      	mov	lr, r3
 80029e2:	4770      	bx	lr
