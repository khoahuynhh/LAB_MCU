
LAB_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028d0  080028d0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080028d0  080028d0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028d0  080028d0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d0  080028d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028d4  080028d4  000128d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080028d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  200001e4  08002abc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08002abc  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5b0  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e64  00000000  00000000  0002a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002c628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002d0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017347  00000000  00000000  0002da68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5fd  00000000  00000000  00044daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008280e  00000000  00000000  000533ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5bba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002978  00000000  00000000  000d5c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002894 	.word	0x08002894

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	08002894 	.word	0x08002894

0800014c <isButton1Pressed>:
int TimeOutForKeyPress = 500;
int button1_pressed[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int button1_long_pressed[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int button1_flag[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

int isButton1Pressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button1_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButton1Pressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButton1Pressed+0x22>
		button1_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButton1Pressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButton1Pressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000200 	.word	0x20000200

08000180 <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button1_flag[index] = 1;
}

void getKeyInput() {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e012      	b.n	80001b2 <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 800018c:	4a46      	ldr	r2, [pc, #280]	; (80002a8 <getKeyInput+0x128>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4945      	ldr	r1, [pc, #276]	; (80002ac <getKeyInput+0x12c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800019c:	4a44      	ldr	r2, [pc, #272]	; (80002b0 <getKeyInput+0x130>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4940      	ldr	r1, [pc, #256]	; (80002a8 <getKeyInput+0x128>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b09      	cmp	r3, #9
 80001b6:	dde9      	ble.n	800018c <getKeyInput+0xc>
	}
	// Add your key
	KeyReg0[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001bc:	483d      	ldr	r0, [pc, #244]	; (80002b4 <getKeyInput+0x134>)
 80001be:	f001 fb3d 	bl	800183c <HAL_GPIO_ReadPin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b3a      	ldr	r3, [pc, #232]	; (80002b0 <getKeyInput+0x130>)
 80001c8:	601a      	str	r2, [r3, #0]
	KeyReg0[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80001ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001ce:	4839      	ldr	r0, [pc, #228]	; (80002b4 <getKeyInput+0x134>)
 80001d0:	f001 fb34 	bl	800183c <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b35      	ldr	r3, [pc, #212]	; (80002b0 <getKeyInput+0x130>)
 80001da:	605a      	str	r2, [r3, #4]
	KeyReg0[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80001dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e0:	4834      	ldr	r0, [pc, #208]	; (80002b4 <getKeyInput+0x134>)
 80001e2:	f001 fb2b 	bl	800183c <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <getKeyInput+0x130>)
 80001ec:	609a      	str	r2, [r3, #8]
	 KeyReg0[6] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
	 KeyReg0[7] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
	 KeyReg0[8] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
	 KeyReg0[9] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);*/

	for (int i = 0; i < 10; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	e050      	b.n	8000296 <getKeyInput+0x116>
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001f4:	4a2c      	ldr	r2, [pc, #176]	; (80002a8 <getKeyInput+0x128>)
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	492c      	ldr	r1, [pc, #176]	; (80002b0 <getKeyInput+0x130>)
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d143      	bne.n	8000290 <getKeyInput+0x110>
 8000208:	4a27      	ldr	r2, [pc, #156]	; (80002a8 <getKeyInput+0x128>)
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4926      	ldr	r1, [pc, #152]	; (80002ac <getKeyInput+0x12c>)
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d139      	bne.n	8000290 <getKeyInput+0x110>
			if (KeyReg2[i] != KeyReg3[i]) {
 800021c:	4a23      	ldr	r2, [pc, #140]	; (80002ac <getKeyInput+0x12c>)
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4924      	ldr	r1, [pc, #144]	; (80002b8 <getKeyInput+0x138>)
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022c:	429a      	cmp	r2, r3
 800022e:	d017      	beq.n	8000260 <getKeyInput+0xe0>
				KeyReg3[i] = KeyReg2[i];
 8000230:	4a1e      	ldr	r2, [pc, #120]	; (80002ac <getKeyInput+0x12c>)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000238:	491f      	ldr	r1, [pc, #124]	; (80002b8 <getKeyInput+0x138>)
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE) {
 8000240:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <getKeyInput+0x138>)
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d121      	bne.n	8000290 <getKeyInput+0x110>
					TimeOutForKeyPress = 500;
 800024c:	4b1b      	ldr	r3, [pc, #108]	; (80002bc <getKeyInput+0x13c>)
 800024e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000252:	601a      	str	r2, [r3, #0]
					//subKeyProcess();
					button1_flag[i] = 1;
 8000254:	4a1a      	ldr	r2, [pc, #104]	; (80002c0 <getKeyInput+0x140>)
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	2101      	movs	r1, #1
 800025a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800025e:	e017      	b.n	8000290 <getKeyInput+0x110>
				}

			} else {
				TimeOutForKeyPress--;
 8000260:	4b16      	ldr	r3, [pc, #88]	; (80002bc <getKeyInput+0x13c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	3b01      	subs	r3, #1
 8000266:	4a15      	ldr	r2, [pc, #84]	; (80002bc <getKeyInput+0x13c>)
 8000268:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress == 0) {
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <getKeyInput+0x13c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d10e      	bne.n	8000290 <getKeyInput+0x110>
					TimeOutForKeyPress = 500;
 8000272:	4b12      	ldr	r3, [pc, #72]	; (80002bc <getKeyInput+0x13c>)
 8000274:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000278:	601a      	str	r2, [r3, #0]
					if (KeyReg3[i] == PRESSED_STATE) {
 800027a:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <getKeyInput+0x138>)
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d104      	bne.n	8000290 <getKeyInput+0x110>
						//subKeyProcess();
						button1_flag[i] = 1;
 8000286:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <getKeyInput+0x140>)
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	2101      	movs	r1, #1
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	3301      	adds	r3, #1
 8000294:	603b      	str	r3, [r7, #0]
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b09      	cmp	r3, #9
 800029a:	ddab      	ble.n	80001f4 <getKeyInput+0x74>
					}
				}
			}
		}
	}
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000028 	.word	0x20000028
 80002ac:	20000050 	.word	0x20000050
 80002b0:	20000000 	.word	0x20000000
 80002b4:	40011000 	.word	0x40011000
 80002b8:	20000078 	.word	0x20000078
 80002bc:	200000a0 	.word	0x200000a0
 80002c0:	20000200 	.word	0x20000200

080002c4 <fsm_auto_run>:

#include "fsm_auto.h"
#include "led7_segment.h"
#include "light_traffic.h"

void fsm_auto_run() {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch (status) {
 80002c8:	4ba7      	ldr	r3, [pc, #668]	; (8000568 <fsm_auto_run+0x2a4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	2b04      	cmp	r3, #4
 80002d0:	f200 813f 	bhi.w	8000552 <fsm_auto_run+0x28e>
 80002d4:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <fsm_auto_run+0x18>)
 80002d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002da:	bf00      	nop
 80002dc:	080002f1 	.word	0x080002f1
 80002e0:	08000307 	.word	0x08000307
 80002e4:	08000399 	.word	0x08000399
 80002e8:	0800042b 	.word	0x0800042b
 80002ec:	080004bf 	.word	0x080004bf
	case INIT:
		init();
 80002f0:	f000 fd02 	bl	8000cf8 <init>
		status = AUTO_RED;
 80002f4:	4b9c      	ldr	r3, [pc, #624]	; (8000568 <fsm_auto_run+0x2a4>)
 80002f6:	2202      	movs	r2, #2
 80002f8:	601a      	str	r2, [r3, #0]
		setTimer(0, 1000);
 80002fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002fe:	2000      	movs	r0, #0
 8000300:	f000 feb4 	bl	800106c <setTimer>
		break;
 8000304:	e12e      	b.n	8000564 <fsm_auto_run+0x2a0>
	case AUTO_RED:
		led_red_and_green();
 8000306:	f000 fd19 	bl	8000d3c <led_red_and_green>
		set_7SEG_X(LEDS_7SEG_state[time_green]);
 800030a:	4b98      	ldr	r3, [pc, #608]	; (800056c <fsm_auto_run+0x2a8>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	4613      	mov	r3, r2
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	4a96      	ldr	r2, [pc, #600]	; (8000570 <fsm_auto_run+0x2ac>)
 8000316:	4413      	add	r3, r2
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fb5d 	bl	80009d8 <set_7SEG_X>
		set_7SEG_Y(LEDS_7SEG_state[time_red]);
 800031e:	4b95      	ldr	r3, [pc, #596]	; (8000574 <fsm_auto_run+0x2b0>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	4613      	mov	r3, r2
 8000324:	00db      	lsls	r3, r3, #3
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	4a91      	ldr	r2, [pc, #580]	; (8000570 <fsm_auto_run+0x2ac>)
 800032a:	4413      	add	r3, r2
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fbbb 	bl	8000aa8 <set_7SEG_Y>
		if (timer_flag[0] == 1) {
 8000332:	4b91      	ldr	r3, [pc, #580]	; (8000578 <fsm_auto_run+0x2b4>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d115      	bne.n	8000366 <fsm_auto_run+0xa2>
			time_green--;
 800033a:	4b8c      	ldr	r3, [pc, #560]	; (800056c <fsm_auto_run+0x2a8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	3b01      	subs	r3, #1
 8000340:	4a8a      	ldr	r2, [pc, #552]	; (800056c <fsm_auto_run+0x2a8>)
 8000342:	6013      	str	r3, [r2, #0]
			time_red--;
 8000344:	4b8b      	ldr	r3, [pc, #556]	; (8000574 <fsm_auto_run+0x2b0>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	3b01      	subs	r3, #1
 800034a:	4a8a      	ldr	r2, [pc, #552]	; (8000574 <fsm_auto_run+0x2b0>)
 800034c:	6013      	str	r3, [r2, #0]
			if (time_green == 0) {
 800034e:	4b87      	ldr	r3, [pc, #540]	; (800056c <fsm_auto_run+0x2a8>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d102      	bne.n	800035c <fsm_auto_run+0x98>
				status = AUTO_YELLOW;
 8000356:	4b84      	ldr	r3, [pc, #528]	; (8000568 <fsm_auto_run+0x2a4>)
 8000358:	2205      	movs	r2, #5
 800035a:	601a      	str	r2, [r3, #0]
			}
			setTimer(0, 1000);
 800035c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000360:	2000      	movs	r0, #0
 8000362:	f000 fe83 	bl	800106c <setTimer>
		}
		if (isButton1Pressed(0) == 1) {
 8000366:	2000      	movs	r0, #0
 8000368:	f7ff fef0 	bl	800014c <isButton1Pressed>
 800036c:	4603      	mov	r3, r0
 800036e:	2b01      	cmp	r3, #1
 8000370:	f040 80f1 	bne.w	8000556 <fsm_auto_run+0x292>
			init();
 8000374:	f000 fcc0 	bl	8000cf8 <init>
			status = MAN_RED;
 8000378:	4b7b      	ldr	r3, [pc, #492]	; (8000568 <fsm_auto_run+0x2a4>)
 800037a:	220c      	movs	r2, #12
 800037c:	601a      	str	r2, [r3, #0]
			setTimer(0, 100000);
 800037e:	497f      	ldr	r1, [pc, #508]	; (800057c <fsm_auto_run+0x2b8>)
 8000380:	2000      	movs	r0, #0
 8000382:	f000 fe73 	bl	800106c <setTimer>
			setTimer(1, 250);
 8000386:	21fa      	movs	r1, #250	; 0xfa
 8000388:	2001      	movs	r0, #1
 800038a:	f000 fe6f 	bl	800106c <setTimer>
			setTimer(2, 250);
 800038e:	21fa      	movs	r1, #250	; 0xfa
 8000390:	2002      	movs	r0, #2
 8000392:	f000 fe6b 	bl	800106c <setTimer>
		}
		break;
 8000396:	e0de      	b.n	8000556 <fsm_auto_run+0x292>
	case AUTO_GREEN:
		led_green_and_red();
 8000398:	f000 fce4 	bl	8000d64 <led_green_and_red>
		set_7SEG_X(LEDS_7SEG_state[time_red]);
 800039c:	4b75      	ldr	r3, [pc, #468]	; (8000574 <fsm_auto_run+0x2b0>)
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	4613      	mov	r3, r2
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	1a9b      	subs	r3, r3, r2
 80003a6:	4a72      	ldr	r2, [pc, #456]	; (8000570 <fsm_auto_run+0x2ac>)
 80003a8:	4413      	add	r3, r2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fb14 	bl	80009d8 <set_7SEG_X>
		set_7SEG_Y(LEDS_7SEG_state[time_green]);
 80003b0:	4b6e      	ldr	r3, [pc, #440]	; (800056c <fsm_auto_run+0x2a8>)
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	4613      	mov	r3, r2
 80003b6:	00db      	lsls	r3, r3, #3
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	4a6d      	ldr	r2, [pc, #436]	; (8000570 <fsm_auto_run+0x2ac>)
 80003bc:	4413      	add	r3, r2
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 fb72 	bl	8000aa8 <set_7SEG_Y>
		if (timer_flag[0] == 1) {
 80003c4:	4b6c      	ldr	r3, [pc, #432]	; (8000578 <fsm_auto_run+0x2b4>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d115      	bne.n	80003f8 <fsm_auto_run+0x134>
			time_green--;
 80003cc:	4b67      	ldr	r3, [pc, #412]	; (800056c <fsm_auto_run+0x2a8>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	4a66      	ldr	r2, [pc, #408]	; (800056c <fsm_auto_run+0x2a8>)
 80003d4:	6013      	str	r3, [r2, #0]
			time_red--;
 80003d6:	4b67      	ldr	r3, [pc, #412]	; (8000574 <fsm_auto_run+0x2b0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	3b01      	subs	r3, #1
 80003dc:	4a65      	ldr	r2, [pc, #404]	; (8000574 <fsm_auto_run+0x2b0>)
 80003de:	6013      	str	r3, [r2, #0]
			if (time_green == 0) {
 80003e0:	4b62      	ldr	r3, [pc, #392]	; (800056c <fsm_auto_run+0x2a8>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d102      	bne.n	80003ee <fsm_auto_run+0x12a>
				status = AUTO_YELLOW_MAIN;
 80003e8:	4b5f      	ldr	r3, [pc, #380]	; (8000568 <fsm_auto_run+0x2a4>)
 80003ea:	2204      	movs	r2, #4
 80003ec:	601a      	str	r2, [r3, #0]
			}
			setTimer(0, 1000);
 80003ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003f2:	2000      	movs	r0, #0
 80003f4:	f000 fe3a 	bl	800106c <setTimer>
		}
		if (isButton1Pressed(0) == 1) {
 80003f8:	2000      	movs	r0, #0
 80003fa:	f7ff fea7 	bl	800014c <isButton1Pressed>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b01      	cmp	r3, #1
 8000402:	f040 80aa 	bne.w	800055a <fsm_auto_run+0x296>
			init();
 8000406:	f000 fc77 	bl	8000cf8 <init>
			status = MAN_RED;
 800040a:	4b57      	ldr	r3, [pc, #348]	; (8000568 <fsm_auto_run+0x2a4>)
 800040c:	220c      	movs	r2, #12
 800040e:	601a      	str	r2, [r3, #0]
			setTimer(0, 100000);
 8000410:	495a      	ldr	r1, [pc, #360]	; (800057c <fsm_auto_run+0x2b8>)
 8000412:	2000      	movs	r0, #0
 8000414:	f000 fe2a 	bl	800106c <setTimer>
			setTimer(1, 250);
 8000418:	21fa      	movs	r1, #250	; 0xfa
 800041a:	2001      	movs	r0, #1
 800041c:	f000 fe26 	bl	800106c <setTimer>
			setTimer(2, 250);
 8000420:	21fa      	movs	r1, #250	; 0xfa
 8000422:	2002      	movs	r0, #2
 8000424:	f000 fe22 	bl	800106c <setTimer>
		}
		break;
 8000428:	e097      	b.n	800055a <fsm_auto_run+0x296>
	case AUTO_YELLOW_MAIN:
		led_yellow_and_red();
 800042a:	f000 fca5 	bl	8000d78 <led_yellow_and_red>
		set_7SEG_X(LEDS_7SEG_state[time_red]);
 800042e:	4b51      	ldr	r3, [pc, #324]	; (8000574 <fsm_auto_run+0x2b0>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	4613      	mov	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	4a4d      	ldr	r2, [pc, #308]	; (8000570 <fsm_auto_run+0x2ac>)
 800043a:	4413      	add	r3, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f000 facb 	bl	80009d8 <set_7SEG_X>
		set_7SEG_Y(LEDS_7SEG_state[time_yellow]);
 8000442:	4b4f      	ldr	r3, [pc, #316]	; (8000580 <fsm_auto_run+0x2bc>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	4613      	mov	r3, r2
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	4a48      	ldr	r2, [pc, #288]	; (8000570 <fsm_auto_run+0x2ac>)
 800044e:	4413      	add	r3, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fb29 	bl	8000aa8 <set_7SEG_Y>
		if (timer_flag[0] == 1) {
 8000456:	4b48      	ldr	r3, [pc, #288]	; (8000578 <fsm_auto_run+0x2b4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d117      	bne.n	800048e <fsm_auto_run+0x1ca>
			time_red--;
 800045e:	4b45      	ldr	r3, [pc, #276]	; (8000574 <fsm_auto_run+0x2b0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	3b01      	subs	r3, #1
 8000464:	4a43      	ldr	r2, [pc, #268]	; (8000574 <fsm_auto_run+0x2b0>)
 8000466:	6013      	str	r3, [r2, #0]
			time_yellow--;
 8000468:	4b45      	ldr	r3, [pc, #276]	; (8000580 <fsm_auto_run+0x2bc>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3b01      	subs	r3, #1
 800046e:	4a44      	ldr	r2, [pc, #272]	; (8000580 <fsm_auto_run+0x2bc>)
 8000470:	6013      	str	r3, [r2, #0]
			if (time_red == 0) {
 8000472:	4b40      	ldr	r3, [pc, #256]	; (8000574 <fsm_auto_run+0x2b0>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <fsm_auto_run+0x1c0>
				init_time();
 800047a:	f000 fc27 	bl	8000ccc <init_time>
				status = AUTO_RED;
 800047e:	4b3a      	ldr	r3, [pc, #232]	; (8000568 <fsm_auto_run+0x2a4>)
 8000480:	2202      	movs	r2, #2
 8000482:	601a      	str	r2, [r3, #0]
			}
			setTimer(0, 1000);
 8000484:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000488:	2000      	movs	r0, #0
 800048a:	f000 fdef 	bl	800106c <setTimer>
		}
		if (isButton1Pressed(0) == 1) {
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff fe5c 	bl	800014c <isButton1Pressed>
 8000494:	4603      	mov	r3, r0
 8000496:	2b01      	cmp	r3, #1
 8000498:	d161      	bne.n	800055e <fsm_auto_run+0x29a>
			init();
 800049a:	f000 fc2d 	bl	8000cf8 <init>
			status = MAN_RED;
 800049e:	4b32      	ldr	r3, [pc, #200]	; (8000568 <fsm_auto_run+0x2a4>)
 80004a0:	220c      	movs	r2, #12
 80004a2:	601a      	str	r2, [r3, #0]
			setTimer(0, 100000);
 80004a4:	4935      	ldr	r1, [pc, #212]	; (800057c <fsm_auto_run+0x2b8>)
 80004a6:	2000      	movs	r0, #0
 80004a8:	f000 fde0 	bl	800106c <setTimer>
			setTimer(1, 250);
 80004ac:	21fa      	movs	r1, #250	; 0xfa
 80004ae:	2001      	movs	r0, #1
 80004b0:	f000 fddc 	bl	800106c <setTimer>
			setTimer(2, 250);
 80004b4:	21fa      	movs	r1, #250	; 0xfa
 80004b6:	2002      	movs	r0, #2
 80004b8:	f000 fdd8 	bl	800106c <setTimer>
		}
		break;
 80004bc:	e04f      	b.n	800055e <fsm_auto_run+0x29a>
	case AUTO_YELLOW:
		led_red_and_yellow();
 80004be:	f000 fc47 	bl	8000d50 <led_red_and_yellow>
		set_7SEG_X(LEDS_7SEG_state[time_yellow]);
 80004c2:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <fsm_auto_run+0x2bc>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	4613      	mov	r3, r2
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	1a9b      	subs	r3, r3, r2
 80004cc:	4a28      	ldr	r2, [pc, #160]	; (8000570 <fsm_auto_run+0x2ac>)
 80004ce:	4413      	add	r3, r2
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fa81 	bl	80009d8 <set_7SEG_X>
		set_7SEG_Y(LEDS_7SEG_state[time_red]);
 80004d6:	4b27      	ldr	r3, [pc, #156]	; (8000574 <fsm_auto_run+0x2b0>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4613      	mov	r3, r2
 80004dc:	00db      	lsls	r3, r3, #3
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	4a23      	ldr	r2, [pc, #140]	; (8000570 <fsm_auto_run+0x2ac>)
 80004e2:	4413      	add	r3, r2
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fadf 	bl	8000aa8 <set_7SEG_Y>
		if (timer_flag[0] == 1) {
 80004ea:	4b23      	ldr	r3, [pc, #140]	; (8000578 <fsm_auto_run+0x2b4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d117      	bne.n	8000522 <fsm_auto_run+0x25e>
			time_red--;
 80004f2:	4b20      	ldr	r3, [pc, #128]	; (8000574 <fsm_auto_run+0x2b0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	3b01      	subs	r3, #1
 80004f8:	4a1e      	ldr	r2, [pc, #120]	; (8000574 <fsm_auto_run+0x2b0>)
 80004fa:	6013      	str	r3, [r2, #0]
			time_yellow--;
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <fsm_auto_run+0x2bc>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3b01      	subs	r3, #1
 8000502:	4a1f      	ldr	r2, [pc, #124]	; (8000580 <fsm_auto_run+0x2bc>)
 8000504:	6013      	str	r3, [r2, #0]
			if (time_red == 0) {
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <fsm_auto_run+0x2b0>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d104      	bne.n	8000518 <fsm_auto_run+0x254>
				init_time();
 800050e:	f000 fbdd 	bl	8000ccc <init_time>
				status = AUTO_GREEN;
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <fsm_auto_run+0x2a4>)
 8000514:	2203      	movs	r2, #3
 8000516:	601a      	str	r2, [r3, #0]
			}
			setTimer(0, 1000);
 8000518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fda5 	bl	800106c <setTimer>
		}
		if (isButton1Pressed(0) == 1) {
 8000522:	2000      	movs	r0, #0
 8000524:	f7ff fe12 	bl	800014c <isButton1Pressed>
 8000528:	4603      	mov	r3, r0
 800052a:	2b01      	cmp	r3, #1
 800052c:	d119      	bne.n	8000562 <fsm_auto_run+0x29e>
			init();
 800052e:	f000 fbe3 	bl	8000cf8 <init>
			status = MAN_RED;
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <fsm_auto_run+0x2a4>)
 8000534:	220c      	movs	r2, #12
 8000536:	601a      	str	r2, [r3, #0]
			setTimer(0, 100000);
 8000538:	4910      	ldr	r1, [pc, #64]	; (800057c <fsm_auto_run+0x2b8>)
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fd96 	bl	800106c <setTimer>
			setTimer(1, 250);
 8000540:	21fa      	movs	r1, #250	; 0xfa
 8000542:	2001      	movs	r0, #1
 8000544:	f000 fd92 	bl	800106c <setTimer>
			setTimer(2, 250);
 8000548:	21fa      	movs	r1, #250	; 0xfa
 800054a:	2002      	movs	r0, #2
 800054c:	f000 fd8e 	bl	800106c <setTimer>
		}
		break;
 8000550:	e007      	b.n	8000562 <fsm_auto_run+0x29e>
	default:
		break;
 8000552:	bf00      	nop
 8000554:	e006      	b.n	8000564 <fsm_auto_run+0x2a0>
		break;
 8000556:	bf00      	nop
 8000558:	e004      	b.n	8000564 <fsm_auto_run+0x2a0>
		break;
 800055a:	bf00      	nop
 800055c:	e002      	b.n	8000564 <fsm_auto_run+0x2a0>
		break;
 800055e:	bf00      	nop
 8000560:	e000      	b.n	8000564 <fsm_auto_run+0x2a0>
		break;
 8000562:	bf00      	nop
	}
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000228 	.word	0x20000228
 800056c:	200000ac 	.word	0x200000ac
 8000570:	20000114 	.word	0x20000114
 8000574:	200000a8 	.word	0x200000a8
 8000578:	200002b0 	.word	0x200002b0
 800057c:	000186a0 	.word	0x000186a0
 8000580:	200000b0 	.word	0x200000b0

08000584 <fsm_manual_run>:
 *      Author: Admin
 */

#include "fsm_manual.h"

void fsm_manual_run() {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	switch (status) {
 8000588:	4b79      	ldr	r3, [pc, #484]	; (8000770 <fsm_manual_run+0x1ec>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b0e      	cmp	r3, #14
 800058e:	f000 8097 	beq.w	80006c0 <fsm_manual_run+0x13c>
 8000592:	2b0e      	cmp	r3, #14
 8000594:	f300 80e3 	bgt.w	800075e <fsm_manual_run+0x1da>
 8000598:	2b0c      	cmp	r3, #12
 800059a:	d002      	beq.n	80005a2 <fsm_manual_run+0x1e>
 800059c:	2b0d      	cmp	r3, #13
 800059e:	d050      	beq.n	8000642 <fsm_manual_run+0xbe>
			time_yellow_new = count;
			status = SET_INIT;
		}
		break;
	default:
		break;
 80005a0:	e0dd      	b.n	800075e <fsm_manual_run+0x1da>
		set_7SEG_X(LEDS_7SEG_state[2]);
 80005a2:	4874      	ldr	r0, [pc, #464]	; (8000774 <fsm_manual_run+0x1f0>)
 80005a4:	f000 fa18 	bl	80009d8 <set_7SEG_X>
		if (timer_flag[0] == 1) {
 80005a8:	4b73      	ldr	r3, [pc, #460]	; (8000778 <fsm_manual_run+0x1f4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d10b      	bne.n	80005c8 <fsm_manual_run+0x44>
			init();
 80005b0:	f000 fba2 	bl	8000cf8 <init>
			init_time();
 80005b4:	f000 fb8a 	bl	8000ccc <init_time>
			status = AUTO_RED;
 80005b8:	4b6d      	ldr	r3, [pc, #436]	; (8000770 <fsm_manual_run+0x1ec>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 80005be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fd52 	bl	800106c <setTimer>
		if (timer_flag[1] == 1) {
 80005c8:	4b6b      	ldr	r3, [pc, #428]	; (8000778 <fsm_manual_run+0x1f4>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d105      	bne.n	80005dc <fsm_manual_run+0x58>
			blinking_led_red();
 80005d0:	f000 fbdc 	bl	8000d8c <blinking_led_red>
			setTimer(1, 250);
 80005d4:	21fa      	movs	r1, #250	; 0xfa
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 fd48 	bl	800106c <setTimer>
		if (timer_flag[2] == 1) {
 80005dc:	4b66      	ldr	r3, [pc, #408]	; (8000778 <fsm_manual_run+0x1f4>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d108      	bne.n	80005f6 <fsm_manual_run+0x72>
			displaySetting(count);
 80005e4:	4b65      	ldr	r3, [pc, #404]	; (800077c <fsm_manual_run+0x1f8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fac9 	bl	8000b80 <displaySetting>
			setTimer(2, 250);
 80005ee:	21fa      	movs	r1, #250	; 0xfa
 80005f0:	2002      	movs	r0, #2
 80005f2:	f000 fd3b 	bl	800106c <setTimer>
		if (isButton1Pressed(0) == 1) {
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff fda8 	bl	800014c <isButton1Pressed>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d10b      	bne.n	800061a <fsm_manual_run+0x96>
			time_red_new = count;
 8000602:	4b5e      	ldr	r3, [pc, #376]	; (800077c <fsm_manual_run+0x1f8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a5e      	ldr	r2, [pc, #376]	; (8000780 <fsm_manual_run+0x1fc>)
 8000608:	6013      	str	r3, [r2, #0]
			count = 1;
 800060a:	4b5c      	ldr	r3, [pc, #368]	; (800077c <fsm_manual_run+0x1f8>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
			init();
 8000610:	f000 fb72 	bl	8000cf8 <init>
			status = MAN_GREEN;
 8000614:	4b56      	ldr	r3, [pc, #344]	; (8000770 <fsm_manual_run+0x1ec>)
 8000616:	220d      	movs	r2, #13
 8000618:	601a      	str	r2, [r3, #0]
		if (isButton1Pressed(1) == 1) {
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff fd96 	bl	800014c <isButton1Pressed>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	f040 809d 	bne.w	8000762 <fsm_manual_run+0x1de>
			if (count > 99) {
 8000628:	4b54      	ldr	r3, [pc, #336]	; (800077c <fsm_manual_run+0x1f8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b63      	cmp	r3, #99	; 0x63
 800062e:	dd02      	ble.n	8000636 <fsm_manual_run+0xb2>
				count = 1;
 8000630:	4b52      	ldr	r3, [pc, #328]	; (800077c <fsm_manual_run+0x1f8>)
 8000632:	2201      	movs	r2, #1
 8000634:	601a      	str	r2, [r3, #0]
			count++;
 8000636:	4b51      	ldr	r3, [pc, #324]	; (800077c <fsm_manual_run+0x1f8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3301      	adds	r3, #1
 800063c:	4a4f      	ldr	r2, [pc, #316]	; (800077c <fsm_manual_run+0x1f8>)
 800063e:	6013      	str	r3, [r2, #0]
		break;
 8000640:	e08f      	b.n	8000762 <fsm_manual_run+0x1de>
		set_7SEG_X(LEDS_7SEG_state[3]);
 8000642:	4850      	ldr	r0, [pc, #320]	; (8000784 <fsm_manual_run+0x200>)
 8000644:	f000 f9c8 	bl	80009d8 <set_7SEG_X>
		if (timer_flag[1] == 1) {
 8000648:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <fsm_manual_run+0x1f4>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d105      	bne.n	800065c <fsm_manual_run+0xd8>
			blinking_led_green();
 8000650:	f000 fbb4 	bl	8000dbc <blinking_led_green>
			setTimer(1, 250);
 8000654:	21fa      	movs	r1, #250	; 0xfa
 8000656:	2001      	movs	r0, #1
 8000658:	f000 fd08 	bl	800106c <setTimer>
		if (timer_flag[2] == 1) {
 800065c:	4b46      	ldr	r3, [pc, #280]	; (8000778 <fsm_manual_run+0x1f4>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d108      	bne.n	8000676 <fsm_manual_run+0xf2>
			displaySetting(count);
 8000664:	4b45      	ldr	r3, [pc, #276]	; (800077c <fsm_manual_run+0x1f8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fa89 	bl	8000b80 <displaySetting>
			setTimer(2, 250);
 800066e:	21fa      	movs	r1, #250	; 0xfa
 8000670:	2002      	movs	r0, #2
 8000672:	f000 fcfb 	bl	800106c <setTimer>
		if (isButton1Pressed(0) == 1) {
 8000676:	2000      	movs	r0, #0
 8000678:	f7ff fd68 	bl	800014c <isButton1Pressed>
 800067c:	4603      	mov	r3, r0
 800067e:	2b01      	cmp	r3, #1
 8000680:	d10b      	bne.n	800069a <fsm_manual_run+0x116>
			time_green_new = count;
 8000682:	4b3e      	ldr	r3, [pc, #248]	; (800077c <fsm_manual_run+0x1f8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a40      	ldr	r2, [pc, #256]	; (8000788 <fsm_manual_run+0x204>)
 8000688:	6013      	str	r3, [r2, #0]
			count = 1;
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <fsm_manual_run+0x1f8>)
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
			init();
 8000690:	f000 fb32 	bl	8000cf8 <init>
			status = MAN_YELLOW;
 8000694:	4b36      	ldr	r3, [pc, #216]	; (8000770 <fsm_manual_run+0x1ec>)
 8000696:	220e      	movs	r2, #14
 8000698:	601a      	str	r2, [r3, #0]
		if (isButton1Pressed(1) == 1) {
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff fd56 	bl	800014c <isButton1Pressed>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d15f      	bne.n	8000766 <fsm_manual_run+0x1e2>
			if (count > 99) {
 80006a6:	4b35      	ldr	r3, [pc, #212]	; (800077c <fsm_manual_run+0x1f8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b63      	cmp	r3, #99	; 0x63
 80006ac:	dd02      	ble.n	80006b4 <fsm_manual_run+0x130>
				count = 1;
 80006ae:	4b33      	ldr	r3, [pc, #204]	; (800077c <fsm_manual_run+0x1f8>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	601a      	str	r2, [r3, #0]
			count++;
 80006b4:	4b31      	ldr	r3, [pc, #196]	; (800077c <fsm_manual_run+0x1f8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	4a30      	ldr	r2, [pc, #192]	; (800077c <fsm_manual_run+0x1f8>)
 80006bc:	6013      	str	r3, [r2, #0]
		break;
 80006be:	e052      	b.n	8000766 <fsm_manual_run+0x1e2>
		set_7SEG_X(LEDS_7SEG_state[4]);
 80006c0:	4832      	ldr	r0, [pc, #200]	; (800078c <fsm_manual_run+0x208>)
 80006c2:	f000 f989 	bl	80009d8 <set_7SEG_X>
		if (timer_flag[1] == 1) {
 80006c6:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <fsm_manual_run+0x1f4>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d105      	bne.n	80006da <fsm_manual_run+0x156>
			blinking_led_yellow();
 80006ce:	f000 fb8d 	bl	8000dec <blinking_led_yellow>
			setTimer(1, 250);
 80006d2:	21fa      	movs	r1, #250	; 0xfa
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 fcc9 	bl	800106c <setTimer>
		if (timer_flag[2] == 1) {
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <fsm_manual_run+0x1f4>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d108      	bne.n	80006f4 <fsm_manual_run+0x170>
			displaySetting(count);
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <fsm_manual_run+0x1f8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fa4a 	bl	8000b80 <displaySetting>
			setTimer(2, 250);
 80006ec:	21fa      	movs	r1, #250	; 0xfa
 80006ee:	2002      	movs	r0, #2
 80006f0:	f000 fcbc 	bl	800106c <setTimer>
		if (isButton1Pressed(0) == 1) {
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fd29 	bl	800014c <isButton1Pressed>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d10e      	bne.n	800071e <fsm_manual_run+0x19a>
			count = 1;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <fsm_manual_run+0x1f8>)
 8000702:	2201      	movs	r2, #1
 8000704:	601a      	str	r2, [r3, #0]
			init();
 8000706:	f000 faf7 	bl	8000cf8 <init>
			init_time();
 800070a:	f000 fadf 	bl	8000ccc <init_time>
			status = AUTO_RED;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <fsm_manual_run+0x1ec>)
 8000710:	2202      	movs	r2, #2
 8000712:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000);
 8000714:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fca7 	bl	800106c <setTimer>
		if (isButton1Pressed(1) == 1) {
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff fd14 	bl	800014c <isButton1Pressed>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	d10b      	bne.n	8000742 <fsm_manual_run+0x1be>
			if (count > 99) {
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <fsm_manual_run+0x1f8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b63      	cmp	r3, #99	; 0x63
 8000730:	dd02      	ble.n	8000738 <fsm_manual_run+0x1b4>
				count = 1;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <fsm_manual_run+0x1f8>)
 8000734:	2201      	movs	r2, #1
 8000736:	601a      	str	r2, [r3, #0]
			count++;
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <fsm_manual_run+0x1f8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <fsm_manual_run+0x1f8>)
 8000740:	6013      	str	r3, [r2, #0]
		if (isButton1Pressed(2) == 1) {
 8000742:	2002      	movs	r0, #2
 8000744:	f7ff fd02 	bl	800014c <isButton1Pressed>
 8000748:	4603      	mov	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d10d      	bne.n	800076a <fsm_manual_run+0x1e6>
			time_yellow_new = count;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <fsm_manual_run+0x1f8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <fsm_manual_run+0x20c>)
 8000754:	6013      	str	r3, [r2, #0]
			status = SET_INIT;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <fsm_manual_run+0x1ec>)
 8000758:	2216      	movs	r2, #22
 800075a:	601a      	str	r2, [r3, #0]
		break;
 800075c:	e005      	b.n	800076a <fsm_manual_run+0x1e6>
		break;
 800075e:	bf00      	nop
 8000760:	e004      	b.n	800076c <fsm_manual_run+0x1e8>
		break;
 8000762:	bf00      	nop
 8000764:	e002      	b.n	800076c <fsm_manual_run+0x1e8>
		break;
 8000766:	bf00      	nop
 8000768:	e000      	b.n	800076c <fsm_manual_run+0x1e8>
		break;
 800076a:	bf00      	nop
	}
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000228 	.word	0x20000228
 8000774:	20000122 	.word	0x20000122
 8000778:	200002b0 	.word	0x200002b0
 800077c:	200000a4 	.word	0x200000a4
 8000780:	200000b4 	.word	0x200000b4
 8000784:	20000129 	.word	0x20000129
 8000788:	200000b8 	.word	0x200000b8
 800078c:	20000130 	.word	0x20000130
 8000790:	200000bc 	.word	0x200000bc

08000794 <fsm_settings_run>:
 *      Author: Admin
 */

#include "fsm_settings.h"

void fsm_settings_run() {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	switch (status) {
 8000798:	4b87      	ldr	r3, [pc, #540]	; (80009b8 <fsm_settings_run+0x224>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3b16      	subs	r3, #22
 800079e:	2b04      	cmp	r3, #4
 80007a0:	f200 80fe 	bhi.w	80009a0 <fsm_settings_run+0x20c>
 80007a4:	a201      	add	r2, pc, #4	; (adr r2, 80007ac <fsm_settings_run+0x18>)
 80007a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007aa:	bf00      	nop
 80007ac:	080007c1 	.word	0x080007c1
 80007b0:	080007f5 	.word	0x080007f5
 80007b4:	08000855 	.word	0x08000855
 80007b8:	080008b5 	.word	0x080008b5
 80007bc:	0800092b 	.word	0x0800092b
	case SET_INIT:
		init();
 80007c0:	f000 fa9a 	bl	8000cf8 <init>
		const_time_red_new = time_red_new;
 80007c4:	4b7d      	ldr	r3, [pc, #500]	; (80009bc <fsm_settings_run+0x228>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a7d      	ldr	r2, [pc, #500]	; (80009c0 <fsm_settings_run+0x22c>)
 80007ca:	6013      	str	r3, [r2, #0]
		const_time_green_new = time_green_new;
 80007cc:	4b7d      	ldr	r3, [pc, #500]	; (80009c4 <fsm_settings_run+0x230>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a7d      	ldr	r2, [pc, #500]	; (80009c8 <fsm_settings_run+0x234>)
 80007d2:	6013      	str	r3, [r2, #0]
		const_time_yellow_new = time_yellow_new;
 80007d4:	4b7d      	ldr	r3, [pc, #500]	; (80009cc <fsm_settings_run+0x238>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a7d      	ldr	r2, [pc, #500]	; (80009d0 <fsm_settings_run+0x23c>)
 80007da:	6013      	str	r3, [r2, #0]
		status = SET_RED;
 80007dc:	4b76      	ldr	r3, [pc, #472]	; (80009b8 <fsm_settings_run+0x224>)
 80007de:	2217      	movs	r2, #23
 80007e0:	601a      	str	r2, [r3, #0]
		setTimer(3, 1000);
 80007e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007e6:	2003      	movs	r0, #3
 80007e8:	f000 fc40 	bl	800106c <setTimer>
		setTimer(4, 250);
 80007ec:	21fa      	movs	r1, #250	; 0xfa
 80007ee:	2004      	movs	r0, #4
 80007f0:	f000 fc3c 	bl	800106c <setTimer>
	case SET_RED:
		led_red_and_green();
 80007f4:	f000 faa2 	bl	8000d3c <led_red_and_green>
		if (timer_flag[3] == 1) {
 80007f8:	4b76      	ldr	r3, [pc, #472]	; (80009d4 <fsm_settings_run+0x240>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d115      	bne.n	800082c <fsm_settings_run+0x98>
			time_green_new--;
 8000800:	4b70      	ldr	r3, [pc, #448]	; (80009c4 <fsm_settings_run+0x230>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3b01      	subs	r3, #1
 8000806:	4a6f      	ldr	r2, [pc, #444]	; (80009c4 <fsm_settings_run+0x230>)
 8000808:	6013      	str	r3, [r2, #0]
			time_red_new--;
 800080a:	4b6c      	ldr	r3, [pc, #432]	; (80009bc <fsm_settings_run+0x228>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3b01      	subs	r3, #1
 8000810:	4a6a      	ldr	r2, [pc, #424]	; (80009bc <fsm_settings_run+0x228>)
 8000812:	6013      	str	r3, [r2, #0]
			if (time_green_new == 0) {
 8000814:	4b6b      	ldr	r3, [pc, #428]	; (80009c4 <fsm_settings_run+0x230>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <fsm_settings_run+0x8e>
				status = SET_YELLOW;
 800081c:	4b66      	ldr	r3, [pc, #408]	; (80009b8 <fsm_settings_run+0x224>)
 800081e:	221a      	movs	r2, #26
 8000820:	601a      	str	r2, [r3, #0]
			}
			setTimer(3, 1000);
 8000822:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000826:	2003      	movs	r0, #3
 8000828:	f000 fc20 	bl	800106c <setTimer>
		}
		if (timer_flag[4] == 1) {
 800082c:	4b69      	ldr	r3, [pc, #420]	; (80009d4 <fsm_settings_run+0x240>)
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	2b01      	cmp	r3, #1
 8000832:	f040 80b7 	bne.w	80009a4 <fsm_settings_run+0x210>
			displaySettingX(time_green_new);
 8000836:	4b63      	ldr	r3, [pc, #396]	; (80009c4 <fsm_settings_run+0x230>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f9e0 	bl	8000c00 <displaySettingX>
			displaySetting(time_red_new);
 8000840:	4b5e      	ldr	r3, [pc, #376]	; (80009bc <fsm_settings_run+0x228>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f99b 	bl	8000b80 <displaySetting>
			setTimer(4, 250);
 800084a:	21fa      	movs	r1, #250	; 0xfa
 800084c:	2004      	movs	r0, #4
 800084e:	f000 fc0d 	bl	800106c <setTimer>
		}
		break;
 8000852:	e0a7      	b.n	80009a4 <fsm_settings_run+0x210>
	case SET_GREEN:
		led_green_and_red();
 8000854:	f000 fa86 	bl	8000d64 <led_green_and_red>
		if (timer_flag[3] == 1) {
 8000858:	4b5e      	ldr	r3, [pc, #376]	; (80009d4 <fsm_settings_run+0x240>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d115      	bne.n	800088c <fsm_settings_run+0xf8>
			time_green_new--;
 8000860:	4b58      	ldr	r3, [pc, #352]	; (80009c4 <fsm_settings_run+0x230>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3b01      	subs	r3, #1
 8000866:	4a57      	ldr	r2, [pc, #348]	; (80009c4 <fsm_settings_run+0x230>)
 8000868:	6013      	str	r3, [r2, #0]
			time_red_new--;
 800086a:	4b54      	ldr	r3, [pc, #336]	; (80009bc <fsm_settings_run+0x228>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	3b01      	subs	r3, #1
 8000870:	4a52      	ldr	r2, [pc, #328]	; (80009bc <fsm_settings_run+0x228>)
 8000872:	6013      	str	r3, [r2, #0]
			if (time_green_new == 0) {
 8000874:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <fsm_settings_run+0x230>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d102      	bne.n	8000882 <fsm_settings_run+0xee>
				status = SET_YELLOW_MAIN;
 800087c:	4b4e      	ldr	r3, [pc, #312]	; (80009b8 <fsm_settings_run+0x224>)
 800087e:	2219      	movs	r2, #25
 8000880:	601a      	str	r2, [r3, #0]
			}
			setTimer(3, 1000);
 8000882:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000886:	2003      	movs	r0, #3
 8000888:	f000 fbf0 	bl	800106c <setTimer>
		}
		if (timer_flag[4] == 1) {
 800088c:	4b51      	ldr	r3, [pc, #324]	; (80009d4 <fsm_settings_run+0x240>)
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	2b01      	cmp	r3, #1
 8000892:	f040 8089 	bne.w	80009a8 <fsm_settings_run+0x214>
			displaySettingX(time_red_new);
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <fsm_settings_run+0x228>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f9b0 	bl	8000c00 <displaySettingX>
			displaySetting(time_green_new);
 80008a0:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <fsm_settings_run+0x230>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 f96b 	bl	8000b80 <displaySetting>
			setTimer(4, 250);
 80008aa:	21fa      	movs	r1, #250	; 0xfa
 80008ac:	2004      	movs	r0, #4
 80008ae:	f000 fbdd 	bl	800106c <setTimer>
		}
		break;
 80008b2:	e079      	b.n	80009a8 <fsm_settings_run+0x214>
	case SET_YELLOW_MAIN:
		led_yellow_and_red();
 80008b4:	f000 fa60 	bl	8000d78 <led_yellow_and_red>
		if (timer_flag[3] == 1) {
 80008b8:	4b46      	ldr	r3, [pc, #280]	; (80009d4 <fsm_settings_run+0x240>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d121      	bne.n	8000904 <fsm_settings_run+0x170>
			time_red_new--;
 80008c0:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <fsm_settings_run+0x228>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <fsm_settings_run+0x228>)
 80008c8:	6013      	str	r3, [r2, #0]
			time_yellow_new--;
 80008ca:	4b40      	ldr	r3, [pc, #256]	; (80009cc <fsm_settings_run+0x238>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	4a3e      	ldr	r2, [pc, #248]	; (80009cc <fsm_settings_run+0x238>)
 80008d2:	6013      	str	r3, [r2, #0]
			if (time_red_new == 0) {
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <fsm_settings_run+0x228>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10e      	bne.n	80008fa <fsm_settings_run+0x166>
				time_red_new = const_time_red_new;
 80008dc:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <fsm_settings_run+0x22c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a36      	ldr	r2, [pc, #216]	; (80009bc <fsm_settings_run+0x228>)
 80008e2:	6013      	str	r3, [r2, #0]
				time_green_new = const_time_green_new;
 80008e4:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <fsm_settings_run+0x234>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a36      	ldr	r2, [pc, #216]	; (80009c4 <fsm_settings_run+0x230>)
 80008ea:	6013      	str	r3, [r2, #0]
				time_yellow_new = const_time_yellow_new;
 80008ec:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <fsm_settings_run+0x23c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a36      	ldr	r2, [pc, #216]	; (80009cc <fsm_settings_run+0x238>)
 80008f2:	6013      	str	r3, [r2, #0]
				status = SET_RED;
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <fsm_settings_run+0x224>)
 80008f6:	2217      	movs	r2, #23
 80008f8:	601a      	str	r2, [r3, #0]
			}
			setTimer(3, 1000);
 80008fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008fe:	2003      	movs	r0, #3
 8000900:	f000 fbb4 	bl	800106c <setTimer>
		}
		if (timer_flag[4] == 1) {
 8000904:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <fsm_settings_run+0x240>)
 8000906:	691b      	ldr	r3, [r3, #16]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d14f      	bne.n	80009ac <fsm_settings_run+0x218>
			displaySettingX(time_red_new);
 800090c:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <fsm_settings_run+0x228>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f975 	bl	8000c00 <displaySettingX>
			displaySetting(time_yellow_new);
 8000916:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <fsm_settings_run+0x238>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f930 	bl	8000b80 <displaySetting>
			setTimer(4, 250);
 8000920:	21fa      	movs	r1, #250	; 0xfa
 8000922:	2004      	movs	r0, #4
 8000924:	f000 fba2 	bl	800106c <setTimer>
		}
		break;
 8000928:	e040      	b.n	80009ac <fsm_settings_run+0x218>
	case SET_YELLOW:
		led_red_and_yellow();
 800092a:	f000 fa11 	bl	8000d50 <led_red_and_yellow>
		if (timer_flag[3] == 1) {
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <fsm_settings_run+0x240>)
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d121      	bne.n	800097a <fsm_settings_run+0x1e6>
			time_red_new--;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <fsm_settings_run+0x228>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <fsm_settings_run+0x228>)
 800093e:	6013      	str	r3, [r2, #0]
			time_yellow_new--;
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <fsm_settings_run+0x238>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3b01      	subs	r3, #1
 8000946:	4a21      	ldr	r2, [pc, #132]	; (80009cc <fsm_settings_run+0x238>)
 8000948:	6013      	str	r3, [r2, #0]
			if (time_red_new == 0) {
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <fsm_settings_run+0x228>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10e      	bne.n	8000970 <fsm_settings_run+0x1dc>
				time_red_new = const_time_red_new;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <fsm_settings_run+0x22c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a19      	ldr	r2, [pc, #100]	; (80009bc <fsm_settings_run+0x228>)
 8000958:	6013      	str	r3, [r2, #0]
				time_green_new = const_time_green_new;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <fsm_settings_run+0x234>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <fsm_settings_run+0x230>)
 8000960:	6013      	str	r3, [r2, #0]
				time_yellow_new = const_time_yellow_new;
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <fsm_settings_run+0x23c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a19      	ldr	r2, [pc, #100]	; (80009cc <fsm_settings_run+0x238>)
 8000968:	6013      	str	r3, [r2, #0]
				status = SET_GREEN;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <fsm_settings_run+0x224>)
 800096c:	2218      	movs	r2, #24
 800096e:	601a      	str	r2, [r3, #0]
			}
			setTimer(3, 1000);
 8000970:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000974:	2003      	movs	r0, #3
 8000976:	f000 fb79 	bl	800106c <setTimer>
		}
		if (timer_flag[4] == 1) {
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <fsm_settings_run+0x240>)
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d116      	bne.n	80009b0 <fsm_settings_run+0x21c>
			displaySettingX(time_yellow_new);
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <fsm_settings_run+0x238>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f93a 	bl	8000c00 <displaySettingX>
			displaySetting(time_red_new);
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <fsm_settings_run+0x228>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f8f5 	bl	8000b80 <displaySetting>
			setTimer(4, 250);
 8000996:	21fa      	movs	r1, #250	; 0xfa
 8000998:	2004      	movs	r0, #4
 800099a:	f000 fb67 	bl	800106c <setTimer>
		}
		break;
 800099e:	e007      	b.n	80009b0 <fsm_settings_run+0x21c>
	default:
		break;
 80009a0:	bf00      	nop
 80009a2:	e006      	b.n	80009b2 <fsm_settings_run+0x21e>
		break;
 80009a4:	bf00      	nop
 80009a6:	e004      	b.n	80009b2 <fsm_settings_run+0x21e>
		break;
 80009a8:	bf00      	nop
 80009aa:	e002      	b.n	80009b2 <fsm_settings_run+0x21e>
		break;
 80009ac:	bf00      	nop
 80009ae:	e000      	b.n	80009b2 <fsm_settings_run+0x21e>
		break;
 80009b0:	bf00      	nop
	}
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000228 	.word	0x20000228
 80009bc:	200000b4 	.word	0x200000b4
 80009c0:	2000023c 	.word	0x2000023c
 80009c4:	200000b8 	.word	0x200000b8
 80009c8:	20000238 	.word	0x20000238
 80009cc:	200000bc 	.word	0x200000bc
 80009d0:	20000234 	.word	0x20000234
 80009d4:	200002b0 	.word	0x200002b0

080009d8 <set_7SEG_X>:
GPIO_PinState LEDS_7SEG_state[10][7] = { { 0, 0, 0, 0, 0, 0, 1 }, { 1, 0, 0, 1,
		1, 1, 1 }, { 0, 0, 1, 0, 0, 1, 0 }, { 0, 0, 0, 0, 1, 1, 0 }, { 1, 0, 0,
		1, 1, 0, 0 }, { 0, 1, 0, 0, 1, 0, 0 }, { 0, 1, 0, 0, 0, 0, 0 }, { 0, 0,
		0, 1, 1, 1, 1 }, { 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 1, 0, 0 } };

void set_7SEG_X(const GPIO_PinState *L_LEDS_X_state) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e6:	4813      	ldr	r0, [pc, #76]	; (8000a34 <set_7SEG_X+0x5c>)
 80009e8:	f000 ff3f 	bl	800186a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f2:	4810      	ldr	r0, [pc, #64]	; (8000a34 <set_7SEG_X+0x5c>)
 80009f4:	f000 ff39 	bl	800186a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	e011      	b.n	8000a22 <set_7SEG_X+0x4a>
		HAL_GPIO_WritePin(SEG_PORTS[i], SEG_PINS[i], L_LEDS_X_state[i]);
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <set_7SEG_X+0x60>)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a06:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <set_7SEG_X+0x64>)
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	f000 ff27 	bl	800186a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b06      	cmp	r3, #6
 8000a26:	ddea      	ble.n	80009fe <set_7SEG_X+0x26>
	}
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40010c00 	.word	0x40010c00
 8000a38:	200000c0 	.word	0x200000c0
 8000a3c:	200000f8 	.word	0x200000f8

08000a40 <set_7SEG_X_left>:

void set_7SEG_X_left(const GPIO_PinState *L_LEDS_X_state) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4e:	4813      	ldr	r0, [pc, #76]	; (8000a9c <set_7SEG_X_left+0x5c>)
 8000a50:	f000 ff0b 	bl	800186a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5a:	4810      	ldr	r0, [pc, #64]	; (8000a9c <set_7SEG_X_left+0x5c>)
 8000a5c:	f000 ff05 	bl	800186a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e011      	b.n	8000a8a <set_7SEG_X_left+0x4a>
		HAL_GPIO_WritePin(SEG_PORTS[i], SEG_PINS[i], L_LEDS_X_state[i]);
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <set_7SEG_X_left+0x60>)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a6e:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <set_7SEG_X_left+0x64>)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f000 fef3 	bl	800186a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	3301      	adds	r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2b06      	cmp	r3, #6
 8000a8e:	ddea      	ble.n	8000a66 <set_7SEG_X_left+0x26>
	}
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40010c00 	.word	0x40010c00
 8000aa0:	200000c0 	.word	0x200000c0
 8000aa4:	200000f8 	.word	0x200000f8

08000aa8 <set_7SEG_Y>:

void set_7SEG_Y(const GPIO_PinState *L_LEDS_Y_state) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab6:	4814      	ldr	r0, [pc, #80]	; (8000b08 <set_7SEG_Y+0x60>)
 8000ab8:	f000 fed7 	bl	800186a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac2:	4811      	ldr	r0, [pc, #68]	; (8000b08 <set_7SEG_Y+0x60>)
 8000ac4:	f000 fed1 	bl	800186a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e013      	b.n	8000af6 <set_7SEG_Y+0x4e>
		HAL_GPIO_WritePin(SEG_PORTS[i + 7], SEG_PINS[i + 7], L_LEDS_Y_state[i]);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3307      	adds	r3, #7
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <set_7SEG_Y+0x64>)
 8000ad4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3307      	adds	r3, #7
 8000adc:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <set_7SEG_Y+0x68>)
 8000ade:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	f000 febd 	bl	800186a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3301      	adds	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b06      	cmp	r3, #6
 8000afa:	dde8      	ble.n	8000ace <set_7SEG_Y+0x26>
	}
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40010c00 	.word	0x40010c00
 8000b0c:	200000c0 	.word	0x200000c0
 8000b10:	200000f8 	.word	0x200000f8

08000b14 <set_7SEG_Y_left>:

void set_7SEG_Y_left(const GPIO_PinState *L_LEDS_Y_state) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b22:	4814      	ldr	r0, [pc, #80]	; (8000b74 <set_7SEG_Y_left+0x60>)
 8000b24:	f000 fea1 	bl	800186a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <set_7SEG_Y_left+0x60>)
 8000b30:	f000 fe9b 	bl	800186a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	e013      	b.n	8000b62 <set_7SEG_Y_left+0x4e>
		HAL_GPIO_WritePin(SEG_PORTS[i + 7], SEG_PINS[i + 7], L_LEDS_Y_state[i]);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3307      	adds	r3, #7
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <set_7SEG_Y_left+0x64>)
 8000b40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3307      	adds	r3, #7
 8000b48:	4a0c      	ldr	r2, [pc, #48]	; (8000b7c <set_7SEG_Y_left+0x68>)
 8000b4a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	f000 fe87 	bl	800186a <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++) {
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2b06      	cmp	r3, #6
 8000b66:	dde8      	ble.n	8000b3a <set_7SEG_Y_left+0x26>
	}
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	200000c0 	.word	0x200000c0
 8000b7c:	200000f8 	.word	0x200000f8

08000b80 <displaySetting>:

void displaySetting(int time) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	switch (counter1) {
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <displaySetting+0x74>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <displaySetting+0x16>
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d013      	beq.n	8000bbc <displaySetting+0x3c>
	case 1:
		set_7SEG_Y(LEDS_7SEG_state[time % 10]);
		counter1 = 0;
		break;
	default:
		break;
 8000b94:	e02a      	b.n	8000bec <displaySetting+0x6c>
		set_7SEG_Y_left(LEDS_7SEG_state[time / 10]);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <displaySetting+0x78>)
 8000b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9e:	1092      	asrs	r2, r2, #2
 8000ba0:	17db      	asrs	r3, r3, #31
 8000ba2:	1ad2      	subs	r2, r2, r3
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	1a9b      	subs	r3, r3, r2
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <displaySetting+0x7c>)
 8000bac:	4413      	add	r3, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ffb0 	bl	8000b14 <set_7SEG_Y_left>
		counter1 = 1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <displaySetting+0x74>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
		break;
 8000bba:	e017      	b.n	8000bec <displaySetting+0x6c>
		set_7SEG_Y(LEDS_7SEG_state[time % 10]);
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <displaySetting+0x78>)
 8000bc0:	fb83 2301 	smull	r2, r3, r3, r1
 8000bc4:	109a      	asrs	r2, r3, #2
 8000bc6:	17cb      	asrs	r3, r1, #31
 8000bc8:	1ad2      	subs	r2, r2, r3
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	1aca      	subs	r2, r1, r3
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <displaySetting+0x7c>)
 8000bdc:	4413      	add	r3, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff62 	bl	8000aa8 <set_7SEG_Y>
		counter1 = 0;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <displaySetting+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
		break;
 8000bea:	bf00      	nop
	}
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000022c 	.word	0x2000022c
 8000bf8:	66666667 	.word	0x66666667
 8000bfc:	20000114 	.word	0x20000114

08000c00 <displaySettingX>:

void displaySettingX(int time) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	switch (counter2) {
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <displaySettingX+0x74>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <displaySettingX+0x16>
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d013      	beq.n	8000c3c <displaySettingX+0x3c>
	case 1:
		set_7SEG_X(LEDS_7SEG_state[time % 10]);
		counter2 = 0;
		break;
	default:
		break;
 8000c14:	e02a      	b.n	8000c6c <displaySettingX+0x6c>
		set_7SEG_X_left(LEDS_7SEG_state[time / 10]);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <displaySettingX+0x78>)
 8000c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c1e:	1092      	asrs	r2, r2, #2
 8000c20:	17db      	asrs	r3, r3, #31
 8000c22:	1ad2      	subs	r2, r2, r3
 8000c24:	4613      	mov	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <displaySettingX+0x7c>)
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff06 	bl	8000a40 <set_7SEG_X_left>
		counter2 = 1;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <displaySettingX+0x74>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
		break;
 8000c3a:	e017      	b.n	8000c6c <displaySettingX+0x6c>
		set_7SEG_X(LEDS_7SEG_state[time % 10]);
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <displaySettingX+0x78>)
 8000c40:	fb83 2301 	smull	r2, r3, r3, r1
 8000c44:	109a      	asrs	r2, r3, #2
 8000c46:	17cb      	asrs	r3, r1, #31
 8000c48:	1ad2      	subs	r2, r2, r3
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	1aca      	subs	r2, r1, r3
 8000c54:	4613      	mov	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	1a9b      	subs	r3, r3, r2
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <displaySettingX+0x7c>)
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff feba 	bl	80009d8 <set_7SEG_X>
		counter2 = 0;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <displaySettingX+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
		break;
 8000c6a:	bf00      	nop
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000230 	.word	0x20000230
 8000c78:	66666667 	.word	0x66666667
 8000c7c:	20000114 	.word	0x20000114

08000c80 <set_LEDS>:
GPIO_PinState LEDS_state[4][12] = { { 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0 }, { 0,
		1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1 },
		{ 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0 }, { 0, 0, 1, 0, 1, 0, 0, 0, 1, 0,
				1, 0 } };

void set_LEDS(const GPIO_PinState *state) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 12; i++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	e011      	b.n	8000cb2 <set_LEDS+0x32>
		HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], state[i]);
 8000c8e:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <set_LEDS+0x44>)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c96:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <set_LEDS+0x48>)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f000 fddf 	bl	800186a <HAL_GPIO_WritePin>
	for (int i = 0; i < 12; i++) {
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2b0b      	cmp	r3, #11
 8000cb6:	ddea      	ble.n	8000c8e <set_LEDS+0xe>
	}
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000015c 	.word	0x2000015c
 8000cc8:	2000018c 	.word	0x2000018c

08000ccc <init_time>:

void init_time() {
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	time_red = 5;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <init_time+0x20>)
 8000cd2:	2205      	movs	r2, #5
 8000cd4:	601a      	str	r2, [r3, #0]
	time_green = 3;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <init_time+0x24>)
 8000cd8:	2203      	movs	r2, #3
 8000cda:	601a      	str	r2, [r3, #0]
	time_yellow = 2;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <init_time+0x28>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	601a      	str	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	200000a8 	.word	0x200000a8
 8000cf0:	200000ac 	.word	0x200000ac
 8000cf4:	200000b0 	.word	0x200000b0

08000cf8 <init>:

void init() {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 12; i++) {
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	e00e      	b.n	8000d22 <init+0x2a>
		HAL_GPIO_WritePin(LED_PORTS[i], LED_PINS[i], RESET);
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <init+0x3c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <init+0x40>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	f000 fda7 	bl	800186a <HAL_GPIO_WritePin>
	for (int i = 0; i < 12; i++) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0b      	cmp	r3, #11
 8000d26:	dded      	ble.n	8000d04 <init+0xc>
	}
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000015c 	.word	0x2000015c
 8000d38:	2000018c 	.word	0x2000018c

08000d3c <led_red_and_green>:

void led_red_and_green() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	set_LEDS(LEDS_state[2]);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <led_red_and_green+0x10>)
 8000d42:	f7ff ff9d 	bl	8000c80 <set_LEDS>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200001bc 	.word	0x200001bc

08000d50 <led_red_and_yellow>:

void led_red_and_yellow() {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	set_LEDS(LEDS_state[3]);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <led_red_and_yellow+0x10>)
 8000d56:	f7ff ff93 	bl	8000c80 <set_LEDS>
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200001c8 	.word	0x200001c8

08000d64 <led_green_and_red>:

void led_green_and_red() {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	set_LEDS(LEDS_state[0]);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <led_green_and_red+0x10>)
 8000d6a:	f7ff ff89 	bl	8000c80 <set_LEDS>
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200001a4 	.word	0x200001a4

08000d78 <led_yellow_and_red>:

void led_yellow_and_red() {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	set_LEDS(LEDS_state[1]);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <led_yellow_and_red+0x10>)
 8000d7e:	f7ff ff7f 	bl	8000c80 <set_LEDS>
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200001b0 	.word	0x200001b0

08000d8c <blinking_led_red>:

void blinking_led_red() {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000d90:	2102      	movs	r1, #2
 8000d92:	4809      	ldr	r0, [pc, #36]	; (8000db8 <blinking_led_red+0x2c>)
 8000d94:	f000 fd81 	bl	800189a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_5_GPIO_Port, LED_5_Pin);
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4807      	ldr	r0, [pc, #28]	; (8000db8 <blinking_led_red+0x2c>)
 8000d9c:	f000 fd7d 	bl	800189a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_8_GPIO_Port, LED_8_Pin);
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <blinking_led_red+0x2c>)
 8000da4:	f000 fd79 	bl	800189a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_11_GPIO_Port, LED_11_Pin);
 8000da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <blinking_led_red+0x2c>)
 8000dae:	f000 fd74 	bl	800189a <HAL_GPIO_TogglePin>
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <blinking_led_green>:

void blinking_led_green() {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <blinking_led_green+0x2c>)
 8000dc4:	f000 fd69 	bl	800189a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8000dc8:	2108      	movs	r1, #8
 8000dca:	4807      	ldr	r0, [pc, #28]	; (8000de8 <blinking_led_green+0x2c>)
 8000dcc:	f000 fd65 	bl	800189a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_7_GPIO_Port, LED_7_Pin);
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <blinking_led_green+0x2c>)
 8000dd4:	f000 fd61 	bl	800189a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_10_GPIO_Port, LED_10_Pin);
 8000dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <blinking_led_green+0x2c>)
 8000dde:	f000 fd5c 	bl	800189a <HAL_GPIO_TogglePin>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40010c00 	.word	0x40010c00

08000dec <blinking_led_yellow>:

void blinking_led_yellow() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000df0:	2104      	movs	r1, #4
 8000df2:	4809      	ldr	r0, [pc, #36]	; (8000e18 <blinking_led_yellow+0x2c>)
 8000df4:	f000 fd51 	bl	800189a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_6_GPIO_Port, LED_6_Pin);
 8000df8:	2120      	movs	r1, #32
 8000dfa:	4807      	ldr	r0, [pc, #28]	; (8000e18 <blinking_led_yellow+0x2c>)
 8000dfc:	f000 fd4d 	bl	800189a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_9_GPIO_Port, LED_9_Pin);
 8000e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <blinking_led_yellow+0x2c>)
 8000e06:	f000 fd48 	bl	800189a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_12_GPIO_Port, LED_12_Pin);
 8000e0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0e:	4802      	ldr	r0, [pc, #8]	; (8000e18 <blinking_led_yellow+0x2c>)
 8000e10:	f000 fd43 	bl	800189a <HAL_GPIO_TogglePin>
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e20:	f000 fa22 	bl	8001268 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e24:	f000 f816 	bl	8000e54 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_TIM2_Init();
 8000e28:	f000 f850 	bl	8000ecc <MX_TIM2_Init>
	MX_GPIO_Init();
 8000e2c:	f000 f89a 	bl	8000f64 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <main+0x30>)
 8000e32:	f001 f977 	bl	8002124 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	status = INIT;
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <main+0x34>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
	while (1) {
		fsm_auto_run();
 8000e3c:	f7ff fa42 	bl	80002c4 <fsm_auto_run>
		fsm_manual_run();
 8000e40:	f7ff fba0 	bl	8000584 <fsm_manual_run>
		fsm_settings_run();
 8000e44:	f7ff fca6 	bl	8000794 <fsm_settings_run>
		fsm_auto_run();
 8000e48:	e7f8      	b.n	8000e3c <main+0x20>
 8000e4a:	bf00      	nop
 8000e4c:	20000240 	.word	0x20000240
 8000e50:	20000228 	.word	0x20000228

08000e54 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b090      	sub	sp, #64	; 0x40
 8000e58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e5a:	f107 0318 	add.w	r3, r7, #24
 8000e5e:	2228      	movs	r2, #40	; 0x28
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fd0e 	bl	8002884 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7e:	2310      	movs	r3, #16
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fd1e 	bl	80018cc <HAL_RCC_OscConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x46>
		Error_Handler();
 8000e96:	f000 f8e3 	bl	8001060 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e9a:	230f      	movs	r3, #15
 8000e9c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 ff8a 	bl	8001dcc <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x6e>
		Error_Handler();
 8000ebe:	f000 f8cf 	bl	8001060 <Error_Handler>
	}
}
 8000ec2:	bf00      	nop
 8000ec4:	3740      	adds	r7, #64	; 0x40
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eee:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000ef2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ef6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f00:	2209      	movs	r2, #9
 8000f02:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000f10:	4813      	ldr	r0, [pc, #76]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f12:	f001 f8b7 	bl	8002084 <HAL_TIM_Base_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000f1c:	f000 f8a0 	bl	8001060 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f2e:	f001 fa35 	bl	800239c <HAL_TIM_ConfigClockSource>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x70>
		Error_Handler();
 8000f38:	f000 f892 	bl	8001060 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_TIM2_Init+0x94>)
 8000f4a:	f001 fc0d 	bl	8002768 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000f54:	f000 f884 	bl	8001060 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000240 	.word	0x20000240

08000f64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f78:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <MX_GPIO_Init+0xd4>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a2e      	ldr	r2, [pc, #184]	; (8001038 <MX_GPIO_Init+0xd4>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <MX_GPIO_Init+0xd4>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0310 	and.w	r3, r3, #16
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <MX_GPIO_Init+0xd4>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a28      	ldr	r2, [pc, #160]	; (8001038 <MX_GPIO_Init+0xd4>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <MX_GPIO_Init+0xd4>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <MX_GPIO_Init+0xd4>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a22      	ldr	r2, [pc, #136]	; (8001038 <MX_GPIO_Init+0xd4>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_GPIO_Init+0xd4>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000fc6:	481d      	ldr	r0, [pc, #116]	; (800103c <MX_GPIO_Init+0xd8>)
 8000fc8:	f000 fc4f 	bl	800186a <HAL_GPIO_WritePin>
					| SEG_5_Pin | SEG_6_Pin | SEG_7_Pin | SEG_8_Pin | SEG_9_Pin
					| SEG_10_Pin | SEG_11_Pin | SEG_12_Pin | SEG_13_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fd2:	481b      	ldr	r0, [pc, #108]	; (8001040 <MX_GPIO_Init+0xdc>)
 8000fd4:	f000 fc49 	bl	800186a <HAL_GPIO_WritePin>
					| EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin | LED_4_Pin
					| LED_5_Pin | LED_6_Pin | LED_7_Pin | LED_8_Pin | LED_9_Pin
					| LED_10_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
	GPIO_InitStruct.Pin = BUTTON_1_Pin | BUTTON_2_Pin | BUTTON_3_Pin;
 8000fd8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fdc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	4619      	mov	r1, r3
 8000fec:	4815      	ldr	r0, [pc, #84]	; (8001044 <MX_GPIO_Init+0xe0>)
 8000fee:	f000 faab 	bl	8001548 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
	 SEG_4_Pin SEG_5_Pin SEG_6_Pin SEG_7_Pin
	 SEG_8_Pin SEG_9_Pin SEG_10_Pin SEG_11_Pin
	 SEG_12_Pin SEG_13_Pin */
	GPIO_InitStruct.Pin = SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin
 8000ff2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000ff6:	613b      	str	r3, [r7, #16]
			| SEG_4_Pin | SEG_5_Pin | SEG_6_Pin | SEG_7_Pin | SEG_8_Pin
			| SEG_9_Pin | SEG_10_Pin | SEG_11_Pin | SEG_12_Pin | SEG_13_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2302      	movs	r3, #2
 8001002:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_GPIO_Init+0xd8>)
 800100c:	f000 fa9c 	bl	8001548 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_11_Pin
	 LED_12_Pin EN0_Pin EN1_Pin EN2_Pin
	 EN3_Pin LED_4_Pin LED_5_Pin LED_6_Pin
	 LED_7_Pin LED_8_Pin LED_9_Pin LED_10_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_11_Pin
 8001010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001014:	613b      	str	r3, [r7, #16]
			| LED_12_Pin | EN0_Pin | EN1_Pin | EN2_Pin | EN3_Pin | LED_4_Pin
			| LED_5_Pin | LED_6_Pin | LED_7_Pin | LED_8_Pin | LED_9_Pin
			| LED_10_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2302      	movs	r3, #2
 8001020:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_GPIO_Init+0xdc>)
 800102a:	f000 fa8d 	bl	8001548 <HAL_GPIO_Init>

}
 800102e:	bf00      	nop
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000
 800103c:	40010800 	.word	0x40010800
 8001040:	40010c00 	.word	0x40010c00
 8001044:	40011000 	.word	0x40011000

08001048 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001050:	f000 f82a 	bl	80010a8 <timerRun>
	getKeyInput();
 8001054:	f7ff f894 	bl	8000180 <getKeyInput>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001068:	e7fe      	b.n	8001068 <Error_Handler+0x8>
	...

0800106c <setTimer>:
 */
#include "software_timer.h"
int timer_flag[10];
int timer_counter[10];
int timer_cycle = 10;
void setTimer(int index, int counter) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <setTimer+0x30>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2100      	movs	r1, #0
 800107c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / timer_cycle;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <setTimer+0x34>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	fb92 f2f3 	sdiv	r2, r2, r3
 800108a:	4906      	ldr	r1, [pc, #24]	; (80010a4 <setTimer+0x38>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	200002b0 	.word	0x200002b0
 80010a0:	200001d4 	.word	0x200001d4
 80010a4:	20000288 	.word	0x20000288

080010a8 <timerRun>:
void timerRun() {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	e017      	b.n	80010e4 <timerRun+0x3c>
		if (timer_counter[i] > 0) {
 80010b4:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <timerRun+0x50>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	dd09      	ble.n	80010d4 <timerRun+0x2c>
			timer_counter[i]--;
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <timerRun+0x50>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c8:	1e5a      	subs	r2, r3, #1
 80010ca:	490b      	ldr	r1, [pc, #44]	; (80010f8 <timerRun+0x50>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80010d2:	e004      	b.n	80010de <timerRun+0x36>
		} else {
			timer_flag[i] = 1;
 80010d4:	4a09      	ldr	r2, [pc, #36]	; (80010fc <timerRun+0x54>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2101      	movs	r1, #1
 80010da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3301      	adds	r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b09      	cmp	r3, #9
 80010e8:	dde4      	ble.n	80010b4 <timerRun+0xc>
		}
	}
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000288 	.word	0x20000288
 80010fc:	200002b0 	.word	0x200002b0

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_MspInit+0x5c>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <HAL_MspInit+0x5c>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6193      	str	r3, [r2, #24]
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_MspInit+0x5c>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_MspInit+0x5c>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_MspInit+0x5c>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_MspInit+0x5c>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_MspInit+0x60>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_MspInit+0x60>)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000

08001164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001174:	d113      	bne.n	800119e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_TIM_Base_MspInit+0x44>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_TIM_Base_MspInit+0x44>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	61d3      	str	r3, [r2, #28]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_TIM_Base_MspInit+0x44>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	201c      	movs	r0, #28
 8001194:	f000 f9a1 	bl	80014da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001198:	201c      	movs	r0, #28
 800119a:	f000 f9ba 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f2:	f000 f87f 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <TIM2_IRQHandler+0x10>)
 8001202:	f000 ffdb 	bl	80021bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000240 	.word	0x20000240

08001210 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800121c:	f7ff fff8 	bl	8001210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001222:	490c      	ldr	r1, [pc, #48]	; (8001254 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001224:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001238:	4c09      	ldr	r4, [pc, #36]	; (8001260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001246:	f001 faf9 	bl	800283c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124a:	f7ff fde7 	bl	8000e1c <main>
  bx lr
 800124e:	4770      	bx	lr
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001254:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001258:	080028d8 	.word	0x080028d8
  ldr r2, =_sbss
 800125c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001260:	200002dc 	.word	0x200002dc

08001264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC1_2_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_Init+0x28>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_Init+0x28>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f923 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	200f      	movs	r0, #15
 8001280:	f000 f808 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff ff3c 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40022000 	.word	0x40022000

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x54>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x58>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f93b 	bl	800152e <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f000 f903 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <HAL_InitTick+0x5c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200001d8 	.word	0x200001d8
 80012ec:	200001e0 	.word	0x200001e0
 80012f0:	200001dc 	.word	0x200001dc

080012f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_IncTick+0x1c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_IncTick+0x20>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a03      	ldr	r2, [pc, #12]	; (8001314 <HAL_IncTick+0x20>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	200001e0 	.word	0x200001e0
 8001314:	200002d8 	.word	0x200002d8

08001318 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <HAL_GetTick+0x10>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	200002d8 	.word	0x200002d8

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4906      	ldr	r1, [pc, #24]	; (80013c4 <__NVIC_EnableIRQ+0x34>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	; (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff90 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff2d 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff42 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff90 	bl	800141c <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5f 	bl	80013c8 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff35 	bl	8001390 <__NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa2 	bl	8001480 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b08b      	sub	sp, #44	; 0x2c
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155a:	e148      	b.n	80017ee <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800155c:	2201      	movs	r2, #1
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	429a      	cmp	r2, r3
 8001576:	f040 8137 	bne.w	80017e8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4aa3      	ldr	r2, [pc, #652]	; (800180c <HAL_GPIO_Init+0x2c4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d05e      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 8001584:	4aa1      	ldr	r2, [pc, #644]	; (800180c <HAL_GPIO_Init+0x2c4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d875      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 800158a:	4aa1      	ldr	r2, [pc, #644]	; (8001810 <HAL_GPIO_Init+0x2c8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d058      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 8001590:	4a9f      	ldr	r2, [pc, #636]	; (8001810 <HAL_GPIO_Init+0x2c8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d86f      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 8001596:	4a9f      	ldr	r2, [pc, #636]	; (8001814 <HAL_GPIO_Init+0x2cc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d052      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 800159c:	4a9d      	ldr	r2, [pc, #628]	; (8001814 <HAL_GPIO_Init+0x2cc>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d869      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015a2:	4a9d      	ldr	r2, [pc, #628]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d04c      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 80015a8:	4a9b      	ldr	r2, [pc, #620]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d863      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015ae:	4a9b      	ldr	r2, [pc, #620]	; (800181c <HAL_GPIO_Init+0x2d4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d046      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
 80015b4:	4a99      	ldr	r2, [pc, #612]	; (800181c <HAL_GPIO_Init+0x2d4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d85d      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015ba:	2b12      	cmp	r3, #18
 80015bc:	d82a      	bhi.n	8001614 <HAL_GPIO_Init+0xcc>
 80015be:	2b12      	cmp	r3, #18
 80015c0:	d859      	bhi.n	8001676 <HAL_GPIO_Init+0x12e>
 80015c2:	a201      	add	r2, pc, #4	; (adr r2, 80015c8 <HAL_GPIO_Init+0x80>)
 80015c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c8:	08001643 	.word	0x08001643
 80015cc:	0800161d 	.word	0x0800161d
 80015d0:	0800162f 	.word	0x0800162f
 80015d4:	08001671 	.word	0x08001671
 80015d8:	08001677 	.word	0x08001677
 80015dc:	08001677 	.word	0x08001677
 80015e0:	08001677 	.word	0x08001677
 80015e4:	08001677 	.word	0x08001677
 80015e8:	08001677 	.word	0x08001677
 80015ec:	08001677 	.word	0x08001677
 80015f0:	08001677 	.word	0x08001677
 80015f4:	08001677 	.word	0x08001677
 80015f8:	08001677 	.word	0x08001677
 80015fc:	08001677 	.word	0x08001677
 8001600:	08001677 	.word	0x08001677
 8001604:	08001677 	.word	0x08001677
 8001608:	08001677 	.word	0x08001677
 800160c:	08001625 	.word	0x08001625
 8001610:	08001639 	.word	0x08001639
 8001614:	4a82      	ldr	r2, [pc, #520]	; (8001820 <HAL_GPIO_Init+0x2d8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800161a:	e02c      	b.n	8001676 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	623b      	str	r3, [r7, #32]
          break;
 8001622:	e029      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	3304      	adds	r3, #4
 800162a:	623b      	str	r3, [r7, #32]
          break;
 800162c:	e024      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	3308      	adds	r3, #8
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e01f      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	330c      	adds	r3, #12
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e01a      	b.n	8001678 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800164a:	2304      	movs	r3, #4
 800164c:	623b      	str	r3, [r7, #32]
          break;
 800164e:	e013      	b.n	8001678 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001658:	2308      	movs	r3, #8
 800165a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	611a      	str	r2, [r3, #16]
          break;
 8001662:	e009      	b.n	8001678 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001664:	2308      	movs	r3, #8
 8001666:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	615a      	str	r2, [r3, #20]
          break;
 800166e:	e003      	b.n	8001678 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
          break;
 8001674:	e000      	b.n	8001678 <HAL_GPIO_Init+0x130>
          break;
 8001676:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2bff      	cmp	r3, #255	; 0xff
 800167c:	d801      	bhi.n	8001682 <HAL_GPIO_Init+0x13a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	e001      	b.n	8001686 <HAL_GPIO_Init+0x13e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3304      	adds	r3, #4
 8001686:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	2bff      	cmp	r3, #255	; 0xff
 800168c:	d802      	bhi.n	8001694 <HAL_GPIO_Init+0x14c>
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	e002      	b.n	800169a <HAL_GPIO_Init+0x152>
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	3b08      	subs	r3, #8
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	210f      	movs	r1, #15
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	401a      	ands	r2, r3
 80016ac:	6a39      	ldr	r1, [r7, #32]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	431a      	orrs	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8090 	beq.w	80017e8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c8:	4b56      	ldr	r3, [pc, #344]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a55      	ldr	r2, [pc, #340]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b53      	ldr	r3, [pc, #332]	; (8001824 <HAL_GPIO_Init+0x2dc>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e0:	4a51      	ldr	r2, [pc, #324]	; (8001828 <HAL_GPIO_Init+0x2e0>)
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	3302      	adds	r3, #2
 80016e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a49      	ldr	r2, [pc, #292]	; (800182c <HAL_GPIO_Init+0x2e4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d00d      	beq.n	8001728 <HAL_GPIO_Init+0x1e0>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a48      	ldr	r2, [pc, #288]	; (8001830 <HAL_GPIO_Init+0x2e8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d007      	beq.n	8001724 <HAL_GPIO_Init+0x1dc>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a47      	ldr	r2, [pc, #284]	; (8001834 <HAL_GPIO_Init+0x2ec>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d101      	bne.n	8001720 <HAL_GPIO_Init+0x1d8>
 800171c:	2302      	movs	r3, #2
 800171e:	e004      	b.n	800172a <HAL_GPIO_Init+0x1e2>
 8001720:	2303      	movs	r3, #3
 8001722:	e002      	b.n	800172a <HAL_GPIO_Init+0x1e2>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_GPIO_Init+0x1e2>
 8001728:	2300      	movs	r3, #0
 800172a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172c:	f002 0203 	and.w	r2, r2, #3
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	4093      	lsls	r3, r2
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800173a:	493b      	ldr	r1, [pc, #236]	; (8001828 <HAL_GPIO_Init+0x2e0>)
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001754:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	4937      	ldr	r1, [pc, #220]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001762:	4b35      	ldr	r3, [pc, #212]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	4933      	ldr	r1, [pc, #204]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 800176c:	4013      	ands	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800177c:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	492d      	ldr	r1, [pc, #180]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	60cb      	str	r3, [r1, #12]
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	43db      	mvns	r3, r3
 8001792:	4929      	ldr	r1, [pc, #164]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 8001794:	4013      	ands	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4923      	ldr	r1, [pc, #140]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	491f      	ldr	r1, [pc, #124]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 80017bc:	4013      	ands	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017cc:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4919      	ldr	r1, [pc, #100]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4915      	ldr	r1, [pc, #84]	; (8001838 <HAL_GPIO_Init+0x2f0>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	3301      	adds	r3, #1
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f47f aeaf 	bne.w	800155c <HAL_GPIO_Init+0x14>
  }
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	372c      	adds	r7, #44	; 0x2c
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	10320000 	.word	0x10320000
 8001810:	10310000 	.word	0x10310000
 8001814:	10220000 	.word	0x10220000
 8001818:	10210000 	.word	0x10210000
 800181c:	10120000 	.word	0x10120000
 8001820:	10110000 	.word	0x10110000
 8001824:	40021000 	.word	0x40021000
 8001828:	40010000 	.word	0x40010000
 800182c:	40010800 	.word	0x40010800
 8001830:	40010c00 	.word	0x40010c00
 8001834:	40011000 	.word	0x40011000
 8001838:	40010400 	.word	0x40010400

0800183c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	e001      	b.n	800185e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	807b      	strh	r3, [r7, #2]
 8001876:	4613      	mov	r3, r2
 8001878:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800187a:	787b      	ldrb	r3, [r7, #1]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001880:	887a      	ldrh	r2, [r7, #2]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001886:	e003      	b.n	8001890 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	041a      	lsls	r2, r3, #16
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	611a      	str	r2, [r3, #16]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ac:	887a      	ldrh	r2, [r7, #2]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	041a      	lsls	r2, r3, #16
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	887b      	ldrh	r3, [r7, #2]
 80018ba:	400b      	ands	r3, r1
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	611a      	str	r2, [r3, #16]
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e26c      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8087 	beq.w	80019fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ec:	4b92      	ldr	r3, [pc, #584]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d00c      	beq.n	8001912 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f8:	4b8f      	ldr	r3, [pc, #572]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	d112      	bne.n	800192a <HAL_RCC_OscConfig+0x5e>
 8001904:	4b8c      	ldr	r3, [pc, #560]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d10b      	bne.n	800192a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001912:	4b89      	ldr	r3, [pc, #548]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d06c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x12c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d168      	bne.n	80019f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e246      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x76>
 8001934:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a7f      	ldr	r2, [pc, #508]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800193a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e02e      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x98>
 800194a:	4b7b      	ldr	r3, [pc, #492]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7a      	ldr	r2, [pc, #488]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b78      	ldr	r3, [pc, #480]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a77      	ldr	r2, [pc, #476]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e01d      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0xbc>
 800196e:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a71      	ldr	r2, [pc, #452]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6e      	ldr	r2, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001988:	4b6b      	ldr	r3, [pc, #428]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6a      	ldr	r2, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800198e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a67      	ldr	r2, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fcb6 	bl	8001318 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff fcb2 	bl	8001318 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e1fa      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0xe4>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fca2 	bl	8001318 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fc9e 	bl	8001318 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e1e6      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x10c>
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d063      	beq.n	8001ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a06:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a12:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d11c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x18c>
 8001a1e:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d116      	bne.n	8001a58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_RCC_OscConfig+0x176>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e1ba      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4939      	ldr	r1, [pc, #228]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	e03a      	b.n	8001ace <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff fc57 	bl	8001318 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6e:	f7ff fc53 	bl	8001318 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e19b      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a80:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4927      	ldr	r1, [pc, #156]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
 8001aa0:	e015      	b.n	8001ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fc36 	bl	8001318 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fc32 	bl	8001318 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e17a      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d03a      	beq.n	8001b50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d019      	beq.n	8001b16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae8:	f7ff fc16 	bl	8001318 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af0:	f7ff fc12 	bl	8001318 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e15a      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f000 fa9a 	bl	8002048 <RCC_Delay>
 8001b14:	e01c      	b.n	8001b50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_RCC_OscConfig+0x274>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fbfc 	bl	8001318 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b22:	e00f      	b.n	8001b44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fbf8 	bl	8001318 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d908      	bls.n	8001b44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e140      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	42420000 	.word	0x42420000
 8001b40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b44:	4b9e      	ldr	r3, [pc, #632]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e9      	bne.n	8001b24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a6 	beq.w	8001caa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b62:	4b97      	ldr	r3, [pc, #604]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10d      	bne.n	8001b8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4b94      	ldr	r3, [pc, #592]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a93      	ldr	r2, [pc, #588]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b91      	ldr	r3, [pc, #580]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b86:	2301      	movs	r3, #1
 8001b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8a:	4b8e      	ldr	r3, [pc, #568]	; (8001dc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d118      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b96:	4b8b      	ldr	r3, [pc, #556]	; (8001dc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a8a      	ldr	r2, [pc, #552]	; (8001dc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fbb9 	bl	8001318 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001baa:	f7ff fbb5 	bl	8001318 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b64      	cmp	r3, #100	; 0x64
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0fd      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	4b81      	ldr	r3, [pc, #516]	; (8001dc4 <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x312>
 8001bd0:	4b7b      	ldr	r3, [pc, #492]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a7a      	ldr	r2, [pc, #488]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6213      	str	r3, [r2, #32]
 8001bdc:	e02d      	b.n	8001c3a <HAL_RCC_OscConfig+0x36e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x334>
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6213      	str	r3, [r2, #32]
 8001bf2:	4b73      	ldr	r3, [pc, #460]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a72      	ldr	r2, [pc, #456]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
 8001bfc:	6213      	str	r3, [r2, #32]
 8001bfe:	e01c      	b.n	8001c3a <HAL_RCC_OscConfig+0x36e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d10c      	bne.n	8001c22 <HAL_RCC_OscConfig+0x356>
 8001c08:	4b6d      	ldr	r3, [pc, #436]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a6c      	ldr	r2, [pc, #432]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	4b6a      	ldr	r3, [pc, #424]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a69      	ldr	r2, [pc, #420]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6213      	str	r3, [r2, #32]
 8001c20:	e00b      	b.n	8001c3a <HAL_RCC_OscConfig+0x36e>
 8001c22:	4b67      	ldr	r3, [pc, #412]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a66      	ldr	r2, [pc, #408]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6213      	str	r3, [r2, #32]
 8001c2e:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a63      	ldr	r2, [pc, #396]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d015      	beq.n	8001c6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c42:	f7ff fb69 	bl	8001318 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7ff fb65 	bl	8001318 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0ab      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c60:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ee      	beq.n	8001c4a <HAL_RCC_OscConfig+0x37e>
 8001c6c:	e014      	b.n	8001c98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fb53 	bl	8001318 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff fb4f 	bl	8001318 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e095      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8c:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ee      	bne.n	8001c76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d105      	bne.n	8001caa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9e:	4b48      	ldr	r3, [pc, #288]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a47      	ldr	r2, [pc, #284]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8081 	beq.w	8001db6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb4:	4b42      	ldr	r3, [pc, #264]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d061      	beq.n	8001d84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d146      	bne.n	8001d56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_OscConfig+0x4fc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff fb23 	bl	8001318 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff fb1f 	bl	8001318 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e067      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce8:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfc:	d108      	bne.n	8001d10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cfe:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	492d      	ldr	r1, [pc, #180]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a19      	ldr	r1, [r3, #32]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	430b      	orrs	r3, r1
 8001d22:	4927      	ldr	r1, [pc, #156]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x4fc>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff faf3 	bl	8001318 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7ff faef 	bl	8001318 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e037      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x46a>
 8001d54:	e02f      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_RCC_OscConfig+0x4fc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fadc 	bl	8001318 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7ff fad8 	bl	8001318 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e020      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x498>
 8001d82:	e018      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e013      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	42420060 	.word	0x42420060

08001dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0d0      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d910      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b67      	ldr	r3, [pc, #412]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0207 	bic.w	r2, r3, #7
 8001df6:	4965      	ldr	r1, [pc, #404]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0b8      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e28:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a58      	ldr	r2, [pc, #352]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e40:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a52      	ldr	r2, [pc, #328]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	494d      	ldr	r1, [pc, #308]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d040      	beq.n	8001eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d115      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e07f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e073      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e06b      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eaa:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4936      	ldr	r1, [pc, #216]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7ff fa2c 	bl	8001318 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7ff fa28 	bl	8001318 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e053      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 020c 	and.w	r2, r3, #12
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d1eb      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d210      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
 8001f02:	4922      	ldr	r1, [pc, #136]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e032      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4916      	ldr	r1, [pc, #88]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f5a:	f000 f821 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	490a      	ldr	r1, [pc, #40]	; (8001f94 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	5ccb      	ldrb	r3, [r1, r3]
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	4a09      	ldr	r2, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x1cc>)
 8001f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_RCC_ClockConfig+0x1d0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f98a 	bl	8001294 <HAL_InitTick>

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	080028ac 	.word	0x080028ac
 8001f98:	200001d8 	.word	0x200001d8
 8001f9c:	200001dc 	.word	0x200001dc

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fba:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d002      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x30>
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x36>
 8001fce:	e027      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd2:	613b      	str	r3, [r7, #16]
      break;
 8001fd4:	e027      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	0c9b      	lsrs	r3, r3, #18
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	0c5b      	lsrs	r3, r3, #17
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	4a11      	ldr	r2, [pc, #68]	; (8002040 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ffa:	5cd3      	ldrb	r3, [r2, r3]
 8001ffc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <HAL_RCC_GetSysClockFreq+0x98>)
 8002002:	fb02 f203 	mul.w	r2, r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e004      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	613b      	str	r3, [r7, #16]
      break;
 800201e:	e002      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_GetSysClockFreq+0x98>)
 8002022:	613b      	str	r3, [r7, #16]
      break;
 8002024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002026:	693b      	ldr	r3, [r7, #16]
}
 8002028:	4618      	mov	r0, r3
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	007a1200 	.word	0x007a1200
 800203c:	080028bc 	.word	0x080028bc
 8002040:	080028cc 	.word	0x080028cc
 8002044:	003d0900 	.word	0x003d0900

08002048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <RCC_Delay+0x34>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <RCC_Delay+0x38>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0a5b      	lsrs	r3, r3, #9
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002064:	bf00      	nop
  }
  while (Delay --);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	60fa      	str	r2, [r7, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f9      	bne.n	8002064 <RCC_Delay+0x1c>
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	200001d8 	.word	0x200001d8
 8002080:	10624dd3 	.word	0x10624dd3

08002084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e041      	b.n	800211a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff f85a 	bl	8001164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 fa56 	bl	8002574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d001      	beq.n	800213c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e035      	b.n	80021a8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <HAL_TIM_Base_Start_IT+0x90>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d009      	beq.n	8002172 <HAL_TIM_Base_Start_IT+0x4e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002166:	d004      	beq.n	8002172 <HAL_TIM_Base_Start_IT+0x4e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <HAL_TIM_Base_Start_IT+0x94>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d111      	bne.n	8002196 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b06      	cmp	r3, #6
 8002182:	d010      	beq.n	80021a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002194:	e007      	b.n	80021a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40012c00 	.word	0x40012c00
 80021b8:	40000400 	.word	0x40000400

080021bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d020      	beq.n	8002220 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01b      	beq.n	8002220 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0202 	mvn.w	r2, #2
 80021f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f998 	bl	800253c <HAL_TIM_IC_CaptureCallback>
 800220c:	e005      	b.n	800221a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f98b 	bl	800252a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f99a 	bl	800254e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d020      	beq.n	800226c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0204 	mvn.w	r2, #4
 800223c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2202      	movs	r2, #2
 8002242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f972 	bl	800253c <HAL_TIM_IC_CaptureCallback>
 8002258:	e005      	b.n	8002266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f965 	bl	800252a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f974 	bl	800254e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d020      	beq.n	80022b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01b      	beq.n	80022b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0208 	mvn.w	r2, #8
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2204      	movs	r2, #4
 800228e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f94c 	bl	800253c <HAL_TIM_IC_CaptureCallback>
 80022a4:	e005      	b.n	80022b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f93f 	bl	800252a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f94e 	bl	800254e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d020      	beq.n	8002304 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01b      	beq.n	8002304 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0210 	mvn.w	r2, #16
 80022d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2208      	movs	r2, #8
 80022da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f926 	bl	800253c <HAL_TIM_IC_CaptureCallback>
 80022f0:	e005      	b.n	80022fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f919 	bl	800252a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f928 	bl	800254e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00c      	beq.n	8002328 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0201 	mvn.w	r2, #1
 8002320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fe90 	bl	8001048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fa6f 	bl	800282a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00c      	beq.n	8002370 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f8f8 	bl	8002560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0220 	mvn.w	r2, #32
 800238c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fa42 	bl	8002818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_TIM_ConfigClockSource+0x1c>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e0b4      	b.n	8002522 <HAL_TIM_ConfigClockSource+0x186>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f0:	d03e      	beq.n	8002470 <HAL_TIM_ConfigClockSource+0xd4>
 80023f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f6:	f200 8087 	bhi.w	8002508 <HAL_TIM_ConfigClockSource+0x16c>
 80023fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fe:	f000 8086 	beq.w	800250e <HAL_TIM_ConfigClockSource+0x172>
 8002402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002406:	d87f      	bhi.n	8002508 <HAL_TIM_ConfigClockSource+0x16c>
 8002408:	2b70      	cmp	r3, #112	; 0x70
 800240a:	d01a      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0xa6>
 800240c:	2b70      	cmp	r3, #112	; 0x70
 800240e:	d87b      	bhi.n	8002508 <HAL_TIM_ConfigClockSource+0x16c>
 8002410:	2b60      	cmp	r3, #96	; 0x60
 8002412:	d050      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0x11a>
 8002414:	2b60      	cmp	r3, #96	; 0x60
 8002416:	d877      	bhi.n	8002508 <HAL_TIM_ConfigClockSource+0x16c>
 8002418:	2b50      	cmp	r3, #80	; 0x50
 800241a:	d03c      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0xfa>
 800241c:	2b50      	cmp	r3, #80	; 0x50
 800241e:	d873      	bhi.n	8002508 <HAL_TIM_ConfigClockSource+0x16c>
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	d058      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x13a>
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d86f      	bhi.n	8002508 <HAL_TIM_ConfigClockSource+0x16c>
 8002428:	2b30      	cmp	r3, #48	; 0x30
 800242a:	d064      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x15a>
 800242c:	2b30      	cmp	r3, #48	; 0x30
 800242e:	d86b      	bhi.n	8002508 <HAL_TIM_ConfigClockSource+0x16c>
 8002430:	2b20      	cmp	r3, #32
 8002432:	d060      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002434:	2b20      	cmp	r3, #32
 8002436:	d867      	bhi.n	8002508 <HAL_TIM_ConfigClockSource+0x16c>
 8002438:	2b00      	cmp	r3, #0
 800243a:	d05c      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x15a>
 800243c:	2b10      	cmp	r3, #16
 800243e:	d05a      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002440:	e062      	b.n	8002508 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6899      	ldr	r1, [r3, #8]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f000 f96a 	bl	800272a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002464:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	609a      	str	r2, [r3, #8]
      break;
 800246e:	e04f      	b.n	8002510 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6899      	ldr	r1, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f000 f953 	bl	800272a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002492:	609a      	str	r2, [r3, #8]
      break;
 8002494:	e03c      	b.n	8002510 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6859      	ldr	r1, [r3, #4]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f000 f8ca 	bl	800263c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2150      	movs	r1, #80	; 0x50
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f921 	bl	80026f6 <TIM_ITRx_SetConfig>
      break;
 80024b4:	e02c      	b.n	8002510 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f000 f8e8 	bl	8002698 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2160      	movs	r1, #96	; 0x60
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f911 	bl	80026f6 <TIM_ITRx_SetConfig>
      break;
 80024d4:	e01c      	b.n	8002510 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f000 f8aa 	bl	800263c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2140      	movs	r1, #64	; 0x40
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f901 	bl	80026f6 <TIM_ITRx_SetConfig>
      break;
 80024f4:	e00c      	b.n	8002510 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4619      	mov	r1, r3
 8002500:	4610      	mov	r0, r2
 8002502:	f000 f8f8 	bl	80026f6 <TIM_ITRx_SetConfig>
      break;
 8002506:	e003      	b.n	8002510 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
      break;
 800250c:	e000      	b.n	8002510 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800250e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
	...

08002574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <TIM_Base_SetConfig+0xc0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d007      	beq.n	800259c <TIM_Base_SetConfig+0x28>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002592:	d003      	beq.n	800259c <TIM_Base_SetConfig+0x28>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a28      	ldr	r2, [pc, #160]	; (8002638 <TIM_Base_SetConfig+0xc4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d108      	bne.n	80025ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a20      	ldr	r2, [pc, #128]	; (8002634 <TIM_Base_SetConfig+0xc0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <TIM_Base_SetConfig+0x52>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d003      	beq.n	80025c6 <TIM_Base_SetConfig+0x52>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <TIM_Base_SetConfig+0xc4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d108      	bne.n	80025d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a0d      	ldr	r2, [pc, #52]	; (8002634 <TIM_Base_SetConfig+0xc0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d103      	bne.n	800260c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f023 0201 	bic.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	611a      	str	r2, [r3, #16]
  }
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	40012c00 	.word	0x40012c00
 8002638:	40000400 	.word	0x40000400

0800263c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	f023 0201 	bic.w	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f023 030a 	bic.w	r3, r3, #10
 8002678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	621a      	str	r2, [r3, #32]
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f023 0210 	bic.w	r2, r3, #16
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	031b      	lsls	r3, r3, #12
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	621a      	str	r2, [r3, #32]
}
 80026ec:	bf00      	nop
 80026ee:	371c      	adds	r7, #28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	f043 0307 	orr.w	r3, r3, #7
 8002718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	609a      	str	r2, [r3, #8]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800272a:	b480      	push	{r7}
 800272c:	b087      	sub	sp, #28
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002744:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	021a      	lsls	r2, r3, #8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	431a      	orrs	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4313      	orrs	r3, r2
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	609a      	str	r2, [r3, #8]
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800277c:	2302      	movs	r3, #2
 800277e:	e041      	b.n	8002804 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d009      	beq.n	80027d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027cc:	d004      	beq.n	80027d8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a10      	ldr	r2, [pc, #64]	; (8002814 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d10c      	bne.n	80027f2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40000400 	.word	0x40000400

08002818 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <__libc_init_array>:
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	2600      	movs	r6, #0
 8002840:	4d0c      	ldr	r5, [pc, #48]	; (8002874 <__libc_init_array+0x38>)
 8002842:	4c0d      	ldr	r4, [pc, #52]	; (8002878 <__libc_init_array+0x3c>)
 8002844:	1b64      	subs	r4, r4, r5
 8002846:	10a4      	asrs	r4, r4, #2
 8002848:	42a6      	cmp	r6, r4
 800284a:	d109      	bne.n	8002860 <__libc_init_array+0x24>
 800284c:	f000 f822 	bl	8002894 <_init>
 8002850:	2600      	movs	r6, #0
 8002852:	4d0a      	ldr	r5, [pc, #40]	; (800287c <__libc_init_array+0x40>)
 8002854:	4c0a      	ldr	r4, [pc, #40]	; (8002880 <__libc_init_array+0x44>)
 8002856:	1b64      	subs	r4, r4, r5
 8002858:	10a4      	asrs	r4, r4, #2
 800285a:	42a6      	cmp	r6, r4
 800285c:	d105      	bne.n	800286a <__libc_init_array+0x2e>
 800285e:	bd70      	pop	{r4, r5, r6, pc}
 8002860:	f855 3b04 	ldr.w	r3, [r5], #4
 8002864:	4798      	blx	r3
 8002866:	3601      	adds	r6, #1
 8002868:	e7ee      	b.n	8002848 <__libc_init_array+0xc>
 800286a:	f855 3b04 	ldr.w	r3, [r5], #4
 800286e:	4798      	blx	r3
 8002870:	3601      	adds	r6, #1
 8002872:	e7f2      	b.n	800285a <__libc_init_array+0x1e>
 8002874:	080028d0 	.word	0x080028d0
 8002878:	080028d0 	.word	0x080028d0
 800287c:	080028d0 	.word	0x080028d0
 8002880:	080028d4 	.word	0x080028d4

08002884 <memset>:
 8002884:	4603      	mov	r3, r0
 8002886:	4402      	add	r2, r0
 8002888:	4293      	cmp	r3, r2
 800288a:	d100      	bne.n	800288e <memset+0xa>
 800288c:	4770      	bx	lr
 800288e:	f803 1b01 	strb.w	r1, [r3], #1
 8002892:	e7f9      	b.n	8002888 <memset+0x4>

08002894 <_init>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	bf00      	nop
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr

080028a0 <_fini>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	bf00      	nop
 80028a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a6:	bc08      	pop	{r3}
 80028a8:	469e      	mov	lr, r3
 80028aa:	4770      	bx	lr
